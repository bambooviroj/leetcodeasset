{
  "question": {
    "questionId": "1097",
    "questionFrontendId": "1032",
    "boundTopicId": null,
    "title": "Stream of Characters",
    "titleSlug": "stream-of-characters",
    "content": "<p>Implement the <code>StreamChecker</code> class as follows:</p>\r\n\r\n<ul>\r\n\t<li><code>StreamChecker(words)</code>: Constructor, init the data structure with the given words.</li>\r\n\t<li><code>query(letter)</code>: returns true if and only if for some <code>k &gt;= 1</code>, the last <code>k</code>&nbsp;characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nStreamChecker streamChecker = new StreamChecker([&quot;cd&quot;,&quot;f&quot;,&quot;kl&quot;]); // init the dictionary.\r\nstreamChecker.query(&#39;a&#39;);          // return false\r\nstreamChecker.query(&#39;b&#39;);          // return false\r\nstreamChecker.query(&#39;c&#39;);          // return false\r\nstreamChecker.query(&#39;d&#39;);          // return true, because &#39;cd&#39; is in the wordlist\r\nstreamChecker.query(&#39;e&#39;);          // return false\r\nstreamChecker.query(&#39;f&#39;);          // return true, because &#39;f&#39; is in the wordlist\r\nstreamChecker.query(&#39;g&#39;);          // return false\r\nstreamChecker.query(&#39;h&#39;);          // return false\r\nstreamChecker.query(&#39;i&#39;);          // return false\r\nstreamChecker.query(&#39;j&#39;);          // return false\r\nstreamChecker.query(&#39;k&#39;);          // return false\r\nstreamChecker.query(&#39;l&#39;);          // return true, because &#39;kl&#39; is in the wordlist\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\r\n\t<li><code>1 &lt;= words[i].length &lt;= 2000</code></li>\r\n\t<li>Words will only consist of lowercase English letters.</li>\r\n\t<li>Queries will only consist of lowercase English letters.</li>\r\n\t<li>The number of queries is at most&nbsp;40000.</li>\r\n</ul>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Hard",
    "likes": 119,
    "dislikes": 32,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "awice",
        "profileUrl": "/awice/",
        "avatarUrl": "https://assets.leetcode.com/users/awice/avatar_1545122053.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Trie",
        "slug": "trie",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class StreamChecker {\r\npublic:\r\n    StreamChecker(vector<string>& words) {\r\n        \r\n    }\r\n    \r\n    bool query(char letter) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * StreamChecker* obj = new StreamChecker(words);\r\n * bool param_1 = obj->query(letter);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class StreamChecker {\r\n\r\n    public StreamChecker(String[] words) {\r\n        \r\n    }\r\n    \r\n    public boolean query(char letter) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * StreamChecker obj = new StreamChecker(words);\r\n * boolean param_1 = obj.query(letter);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class StreamChecker(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n\n    def query(self, letter):\n        \"\"\"\n        :type letter: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your StreamChecker object will be instantiated and called as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class StreamChecker:\n\n    def __init__(self, words: List[str]):\n        \n\n    def query(self, letter: str) -> bool:\n        \n\n\n# Your StreamChecker object will be instantiated and called as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} StreamChecker;\n\n\nStreamChecker* streamCheckerCreate(char ** words, int wordsSize) {\n    \n}\n\nbool streamCheckerQuery(StreamChecker* obj, char letter) {\n  \n}\n\nvoid streamCheckerFree(StreamChecker* obj) {\n    \n}\n\n/**\n * Your StreamChecker struct will be instantiated and called as such:\n * StreamChecker* obj = streamCheckerCreate(words, wordsSize);\n * bool param_1 = streamCheckerQuery(obj, letter);\n \n * streamCheckerFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class StreamChecker {\r\n\r\n    public StreamChecker(string[] words) {\r\n        \r\n    }\r\n    \r\n    public bool Query(char letter) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * StreamChecker obj = new StreamChecker(words);\r\n * bool param_1 = obj.Query(letter);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string[]} words\n */\nvar StreamChecker = function(words) {\n    \n};\n\n/** \n * @param {character} letter\n * @return {boolean}\n */\nStreamChecker.prototype.query = function(letter) {\n    \n};\n\n/** \n * Your StreamChecker object will be instantiated and called as such:\n * var obj = new StreamChecker(words)\n * var param_1 = obj.query(letter)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class StreamChecker\r\n\r\n=begin\r\n    :type words: String[]\r\n=end\r\n    def initialize(words)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type letter: Character\r\n    :rtype: Boolean\r\n=end\r\n    def query(letter)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your StreamChecker object will be instantiated and called as such:\r\n# obj = StreamChecker.new(words)\r\n# param_1 = obj.query(letter)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\r\nclass StreamChecker {\r\n\r\n    init(_ words: [String]) {\r\n        \r\n    }\r\n    \r\n    func query(_ letter: Character) -> Bool {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * let obj = StreamChecker(words)\r\n * let ret_1: Bool = obj.query(letter)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type StreamChecker struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(words []string) StreamChecker {\r\n    \r\n}\r\n\r\n\r\nfunc (this *StreamChecker) Query(letter byte) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * obj := Constructor(words);\r\n * param_1 := obj.Query(letter);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class StreamChecker(_words: Array[String]) {\r\n\r\n    def query(letter: Char): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * var obj = new StreamChecker(words)\r\n * var param_1 = obj.query(letter)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class StreamChecker(words: Array<String>) {\r\n\r\n    fun query(letter: Char): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your StreamChecker object will be instantiated and called as such:\r\n * var obj = StreamChecker(words)\r\n * var param_1 = obj.query(letter)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct StreamChecker {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl StreamChecker {\n\n    fn new(words: Vec<String>) -> Self {\n        \n    }\n    \n    fn query(&self, letter: char) -> bool {\n        \n    }\n}\n\n/**\n * Your StreamChecker object will be instantiated and called as such:\n * let obj = StreamChecker::new(words);\n * let ret_1: bool = obj.query(letter);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class StreamChecker {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n        \n    }\n  \n    /**\n     * @param String $letter\n     * @return Boolean\n     */\n    function query($letter) {\n        \n    }\n}\n\n/**\n * Your StreamChecker object will be instantiated and called as such:\n * $obj = StreamChecker($words);\n * $ret_1 = $obj->query($letter);\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"15.7K\", \"totalAcceptedRaw\": 6741, \"totalSubmissionRaw\": 15723, \"acRate\": \"42.9%\"}",
    "hints": [
      "Put the words into a trie, and manage a set of pointers within that trie."
    ],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"StreamChecker\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\"]\n[[[\"cd\",\"f\",\"kl\"]],[\"a\"],[\"b\"],[\"c\"],[\"d\"],[\"e\"],[\"f\"],[\"g\"],[\"h\"],[\"i\"],[\"j\"],[\"k\"],[\"l\"]]",
    "metaData": "{\r\n    \"classname\": \"StreamChecker\",\r\n    \"maxbytesperline\": 500000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string[]\",\r\n                \"name\": \"words\"\r\n            }]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"query\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"character\",\r\n                    \"name\": \"letter\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"starts\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"ends\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<boolean>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}