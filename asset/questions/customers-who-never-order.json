{
  "question": {
    "questionId": "183",
    "questionFrontendId": "183",
    "boundTopicId": null,
    "title": "Customers Who Never Order",
    "titleSlug": "customers-who-never-order",
    "content": "<p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>\r\n\r\n<p>Table: <code>Customers</code>.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Name  |\r\n+----+-------+\r\n| 1  | Joe   |\r\n| 2  | Henry |\r\n| 3  | Sam   |\r\n| 4  | Max   |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>Table: <code>Orders</code>.</p>\r\n\r\n<pre>\r\n+----+------------+\r\n| Id | CustomerId |\r\n+----+------------+\r\n| 1  | 3          |\r\n| 2  | 1          |\r\n+----+------------+\r\n</pre>\r\n\r\n<p>Using the above tables as example, return the following:</p>\r\n\r\n<pre>\r\n+-----------+\r\n| Customers |\r\n+-----------+\r\n| Henry     |\r\n| Max       |\r\n+-----------+\r\n</pre>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Easy",
    "likes": 264,
    "dislikes": 34,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"116.8K\", \"totalSubmission\": \"251.2K\", \"totalAcceptedRaw\": 116815, \"totalSubmissionRaw\": 251186, \"acRate\": \"46.5%\"}",
    "hints": [],
    "solution": {
      "id": "218",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"Customers\": [\"Id\", \"Name\"], \"Orders\": [\"Id\", \"CustomerId\"]}, \"rows\": {\"Customers\": [[1, \"Joe\"], [2, \"Henry\"], [3, \"Sam\"], [4, \"Max\"]], \"Orders\": [[1, 3], [2, 1]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Customers (Id int, Name varchar(255))\",\n    \"Create table If Not Exists Orders (Id int, CustomerId int)\"\n  ],\n  \"mssql\": [\n    \"create table Customers ( Id int,  Name varchar(255) )\",\n    \"Create table Orders (Id int, CustomerId int)\"\n  ],\n  \"oraclesql\": [\n    \"create table Customers ( Id int,  Name varchar(255) )\",\n    \"Create table Orders (Id int, CustomerId int)\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Customers (Id int, Name varchar(255))",
      "Create table If Not Exists Orders (Id int, CustomerId int)",
      "Truncate table Customers",
      "insert into Customers (Id, Name) values ('1', 'Joe')",
      "insert into Customers (Id, Name) values ('2', 'Henry')",
      "insert into Customers (Id, Name) values ('3', 'Sam')",
      "insert into Customers (Id, Name) values ('4', 'Max')",
      "Truncate table Orders",
      "insert into Orders (Id, CustomerId) values ('1', '3')",
      "insert into Orders (Id, CustomerId) values ('2', '1')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}