{
  "question": {
    "questionId": "627",
    "questionFrontendId": "627",
    "boundTopicId": null,
    "title": "Swap Salary",
    "titleSlug": "swap-salary",
    "content": "<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p>\r\n\r\n<p>Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | m   | 2500   |\r\n| 2  | B    | f   | 1500   |\r\n| 3  | C    | m   | 5500   |\r\n| 4  | D    | f   | 500    |\r\n</pre>\r\nAfter running your <strong>update</strong> statement, the above salary table should have the following rows:\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | f   | 2500   |\r\n| 2  | B    | m   | 1500   |\r\n| 3  | C    | f   | 5500   |\r\n| 4  | D    | m   | 500    |\r\n</pre>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Easy",
    "likes": 333,
    "dislikes": 238,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "Mr-Bin",
        "profileUrl": "/mr-bin/",
        "avatarUrl": "https://assets.leetcode.com/users/mr-bin/avatar_1547655304.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\r\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\r\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\r\n",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"75.9K\", \"totalSubmission\": \"108K\", \"totalAcceptedRaw\": 75880, \"totalSubmissionRaw\": 107994, \"acRate\": \"70.3%\"}",
    "hints": [],
    "solution": {
      "id": "177",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\":{\"salary\":[\"id\",\"name\",\"sex\",\"salary\"]},\"rows\":{\"salary\":[[1,\"A\",\"m\",2500],[2,\"B\",\"f\",1500],[3,\"C\",\"m\",5500],[4,\"D\",\"f\",500]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"create table if not exists salary(id int, name varchar(100), sex char(1), salary int)\"\n  ],\n  \"mssql\": [\n    \"create table salary(id int, name varchar(100), sex char(1), salary int)\"\n  ],\n  \"oraclesql\": [\n    \"create table salary(id int, name varchar(100), sex char(1), salary int)\"\n  ],\n  \"database\": true,\n  \"manual\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "create table if not exists salary(id int, name varchar(100), sex char(1), salary int)",
      "Truncate table salary",
      "insert into salary (id, name, sex, salary) values ('1', 'A', 'm', '2500')",
      "insert into salary (id, name, sex, salary) values ('2', 'B', 'f', '1500')",
      "insert into salary (id, name, sex, salary) values ('3', 'C', 'm', '5500')",
      "insert into salary (id, name, sex, salary) values ('4', 'D', 'f', '500')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}