{
  "question": {
    "questionId": "138",
    "questionFrontendId": "138",
    "boundTopicId": null,
    "title": "Copy List with Random Pointer",
    "titleSlug": "copy-list-with-random-pointer",
    "content": "<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>\r\n\r\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://discuss.leetcode.com/uploads/files/1470150906153-2yxeznm.png\" style=\"width: 375px; height: 129px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-1-1\">{&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:2},&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:1}\r\n</span>\r\n<b>Explanation:\r\n</b>Node 1&#39;s value is 1, both of its next and random pointer points to Node 2.\r\nNode 2&#39;s value is 2, its next pointer points to null and its random pointer points to itself.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>You must return the <strong>copy of the given head</strong>&nbsp;as a reference to the cloned list.</li>\r\n</ol>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 1806,
    "dislikes": 476,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Clone Graph\", \"titleSlug\": \"clone-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Linked List",
        "slug": "linked-list",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val;\r\n    Node* next;\r\n    Node* random;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, Node* _next, Node* _random) {\r\n        val = _val;\r\n        next = _next;\r\n        random = _random;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    Node* copyRandomList(Node* head) {\r\n        \r\n    }\r\n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public Node next;\r\n    public Node random;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,Node _next,Node _random) {\r\n        val = _val;\r\n        next = _next;\r\n        random = _random;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n    public Node copyRandomList(Node head) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, next, random):\r\n        self.val = val\r\n        self.next = next\r\n        self.random = random\r\n\"\"\"\r\nclass Solution(object):\r\n    def copyRandomList(self, head):\r\n        \"\"\"\r\n        :type head: Node\r\n        :rtype: Node\r\n        \"\"\"\r\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "\"\"\"\r\n# Definition for a Node.\r\nclass Node:\r\n    def __init__(self, val, next, random):\r\n        self.val = val\r\n        self.next = next\r\n        self.random = random\r\n\"\"\"\r\nclass Solution:\r\n    def copyRandomList(self, head: 'Node') -> 'Node':\r\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public Node next;\r\n    public Node random;\r\n\r\n    public Node(){}\r\n    public Node(int _val,Node _next,Node _random) {\r\n        val = _val;\r\n        next = _next;\r\n        random = _random;\r\n}\r\n*/\r\npublic class Solution {\r\n    public Node CopyRandomList(Node head) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\r\n * // Definition for a Node.\r\n * function Node(val,next,random) {\r\n *    this.val = val;\r\n *    this.next = next;\r\n *    this.random = random;\r\n * };\r\n */\r\n/**\r\n * @param {Node} head\r\n * @return {Node}\r\n */\r\nvar copyRandomList = function(head) {\r\n    \r\n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public $val;\r\n    public $next;\r\n    public $random;\r\n\r\n    @param Integer $val \r\n    @param Node $next \r\n    @param Node $random \r\n    function __construct($val, $next, $random) {\r\n        $this->val = $val;\r\n        $this->next = $next;\r\n        $this->random = $random;\r\n    }\r\n}\r\n*/\r\nclass Solution {\r\n\r\n    /**\r\n     * @param Node $head\r\n     * @return Node\r\n     */\r\n    function copyRandomList($head) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"271K\", \"totalSubmission\": \"951.1K\", \"totalAcceptedRaw\": 270997, \"totalSubmissionRaw\": 951087, \"acRate\": \"28.5%\"}",
    "hints": [
      "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node.",
      "You may want to use extra space to keep <b>old node ---> new node</b> mapping to prevent creating multiples copies of same node.",
      "We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n<pre>\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'\r\n</pre>",
      "The interweaving is done using <b>next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for <b>random</b> pointers."
    ],
    "solution": {
      "id": "556",
      "canSeeDetail": false,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"$id\":\"1\",\"next\":{\"$id\":\"2\",\"next\":null,\"random\":{\"$ref\":\"2\"},\"val\":2},\"random\":{\"$ref\":\"2\"},\"val\":1}",
    "metaData": "{\n  \"name\": \"copyRandomList\",\n  \"params\": [\n    {\n      \"name\": \"head\",\n      \"type\": \"Node\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"Node\"\n  },\n  \"structures\": [\n    {\n      \"name\": \"Node\",\n      \"comment\": \"Definition for a Node.\",\n      \"members\": [\n        {\n          \"name\": \"val\",\n          \"type\": \"integer\"\n        },\n        {\n          \"name\": \"next\",\n          \"type\": \"Node\"\n        },\n        {\n          \"name\": \"random\",\n          \"type\": \"Node\"\n        }\n      ]\n    }\n  ],\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"php\"\n  ],\n  \"manual\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}