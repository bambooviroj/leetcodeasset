{
  "question": {
    "questionId": "584",
    "questionFrontendId": "584",
    "boundTopicId": null,
    "title": "Find Customer Referee",
    "titleSlug": "find-customer-referee",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Easy",
    "likes": 47,
    "dislikes": 23,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "Mr-Bin",
        "profileUrl": "/mr-bin/",
        "avatarUrl": "https://assets.leetcode.com/users/mr-bin/avatar_1547655304.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"14.6K\", \"totalSubmission\": \"21.4K\", \"totalAcceptedRaw\": 14602, \"totalSubmissionRaw\": 21374, \"acRate\": \"68.3%\"}",
    "hints": [
      "Be careful of the NULL value"
    ],
    "solution": {
      "id": "156",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{ \"headers\": { \"customer\": [ \"id\", \"name\", \"referee_id\"] }, \"rows\": {\"customer\": [[1, \"Will\", null], [2, \"Jane\", null], [3, \"Alex\", 2], [4, \"Bill\", null], [5, \"Zack\", 1], [6, \"Mark\", 2]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"CREATE TABLE IF NOT EXISTS customer (id INT,name VARCHAR(25),referee_id INT);\"\r\n  ],\r\n  \"mssql\": [\r\n    \"CREATE TABLE customer (id INT,name VARCHAR(25),referee_id INT);\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"CREATE TABLE customer (id INT,name VARCHAR(25),referee_id INT);\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "CREATE TABLE IF NOT EXISTS customer (id INT,name VARCHAR(25),referee_id INT);",
      "Truncate table customer",
      "insert into customer (id, name, referee_id) values ('1', 'Will', 'None')",
      "insert into customer (id, name, referee_id) values ('2', 'Jane', 'None')",
      "insert into customer (id, name, referee_id) values ('3', 'Alex', '2')",
      "insert into customer (id, name, referee_id) values ('4', 'Bill', 'None')",
      "insert into customer (id, name, referee_id) values ('5', 'Zack', '1')",
      "insert into customer (id, name, referee_id) values ('6', 'Mark', '2')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}