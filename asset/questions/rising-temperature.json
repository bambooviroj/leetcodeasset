{
  "question": {
    "questionId": "197",
    "questionFrontendId": "197",
    "boundTopicId": null,
    "title": "Rising Temperature",
    "titleSlug": "rising-temperature",
    "content": "<p>Given a <code>Weather</code> table, write a SQL query to find all dates&#39; Ids with higher temperature compared to its previous (yesterday&#39;s) dates.</p>\r\n\r\n<pre>\r\n+---------+------------------+------------------+\r\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\r\n+---------+------------------+------------------+\r\n|       1 |       2015-01-01 |               10 |\r\n|       2 |       2015-01-02 |               25 |\r\n|       3 |       2015-01-03 |               20 |\r\n|       4 |       2015-01-04 |               30 |\r\n+---------+------------------+------------------+\r\n</pre>\r\n\r\n<p>For example, return the following Ids for the above <code>Weather</code> table:</p>\r\n\r\n<pre>\r\n+----+\r\n| Id |\r\n+----+\r\n|  2 |\r\n|  4 |\r\n+----+\r\n</pre>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Easy",
    "likes": 269,
    "dislikes": 112,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"85.6K\", \"totalSubmission\": \"240K\", \"totalAcceptedRaw\": 85615, \"totalSubmissionRaw\": 240008, \"acRate\": \"35.7%\"}",
    "hints": [],
    "solution": {
      "id": "211",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"Weather\": [\"Id\", \"RecordDate\", \"Temperature\"]}, \"rows\": {\"Weather\": [[1, \"2015-01-01\", 10], [2, \"2015-01-02\", 25], [3, \"2015-01-03\", 20], [4, \"2015-01-04\", 30]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists Weather (Id int, RecordDate date, Temperature int)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"create table Weather ( Id int, RecordDate date, Temperature int )\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"create table Weather ( Id int, RecordDate date, Temperature int )\",\r\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Weather (Id int, RecordDate date, Temperature int)",
      "Truncate table Weather",
      "insert into Weather (Id, RecordDate, Temperature) values ('1', '2015-01-01', '10')",
      "insert into Weather (Id, RecordDate, Temperature) values ('2', '2015-01-02', '25')",
      "insert into Weather (Id, RecordDate, Temperature) values ('3', '2015-01-03', '20')",
      "insert into Weather (Id, RecordDate, Temperature) values ('4', '2015-01-04', '30')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}