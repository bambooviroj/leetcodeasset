{
  "question": {
    "questionId": "817",
    "questionFrontendId": "706",
    "boundTopicId": null,
    "title": "Design HashMap",
    "titleSlug": "design-hashmap",
    "content": "<p>Design a HashMap&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>put(key, value)</code> :&nbsp;Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>\r\n\t<li><code>get(key)</code>: Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>\r\n\t<li><code>remove(key)</code> :&nbsp;Remove the mapping for the value key if this map contains the mapping for the key.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashMap hashMap = new MyHashMap();\r\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1\r\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found)\r\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// update the existing value\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1 \r\nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// remove the mapping for 2\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found) \r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All keys and values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashMap library.</li>\r\n</ul>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Easy",
    "likes": 390,
    "dislikes": 67,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Design HashSet\", \"titleSlug\": \"design-hashset\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
    "contributors": [
      {
        "username": "1337c0d3r",
        "profileUrl": "/1337c0d3r/",
        "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Design",
        "slug": "design",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyHashMap {\npublic:\n    /** Initialize your data structure here. */\n    MyHashMap() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    void put(int key, int value) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    int get(int key) {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    void remove(int key) {\n        \n    }\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap* obj = new MyHashMap();\n * obj->put(key,value);\n * int param_2 = obj->get(key);\n * obj->remove(key);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyHashMap {\n\n    /** Initialize your data structure here. */\n    public MyHashMap() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    public void put(int key, int value) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    public int get(int key) {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    public void remove(int key) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.put(key,value);\n * int param_2 = obj.get(key);\n * obj.remove(key);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyHashMap(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        value will always be non-negative.\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def remove(self, key):\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyHashMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        value will always be non-negative.\n        \"\"\"\n        \n\n    def get(self, key: int) -> int:\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        \"\"\"\n        \n\n    def remove(self, key: int) -> None:\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        \"\"\"\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyHashMap;\n\n/** Initialize your data structure here. */\n\nMyHashMap* myHashMapCreate() {\n    \n}\n\n/** value will always be non-negative. */\nvoid myHashMapPut(MyHashMap* obj, int key, int value) {\n  \n}\n\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\nint myHashMapGet(MyHashMap* obj, int key) {\n  \n}\n\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\nvoid myHashMapRemove(MyHashMap* obj, int key) {\n  \n}\n\nvoid myHashMapFree(MyHashMap* obj) {\n    \n}\n\n/**\n * Your MyHashMap struct will be instantiated and called as such:\n * MyHashMap* obj = myHashMapCreate();\n * myHashMapPut(obj, key, value);\n \n * int param_2 = myHashMapGet(obj, key);\n \n * myHashMapRemove(obj, key);\n \n * myHashMapFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyHashMap {\n\n    /** Initialize your data structure here. */\n    public MyHashMap() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    public void Put(int key, int value) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    public int Get(int key) {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    public void Remove(int key) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.Put(key,value);\n * int param_2 = obj.Get(key);\n * obj.Remove(key);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Initialize your data structure here.\n */\nvar MyHashMap = function() {\n    \n};\n\n/**\n * value will always be non-negative. \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nMyHashMap.prototype.put = function(key, value) {\n    \n};\n\n/**\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \n * @param {number} key\n * @return {number}\n */\nMyHashMap.prototype.get = function(key) {\n    \n};\n\n/**\n * Removes the mapping of the specified value key if this map contains a mapping for the key \n * @param {number} key\n * @return {void}\n */\nMyHashMap.prototype.remove = function(key) {\n    \n};\n\n/** \n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyHashMap\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    value will always be non-negative.\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n        \n    end\n\n\n=begin\n    Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n        \n    end\n\n\n=begin\n    Removes the mapping of the specified value key if this map contains a mapping for the key\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n        \n    end\n\n\nend\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap.new()\n# obj.put(key, value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyHashMap {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    func put(_ key: Int, _ value: Int) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    func remove(_ key: Int) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap()\n * obj.put(key, value)\n * let ret_2: Int = obj.get(key)\n * obj.remove(key)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyHashMap struct {\n    \n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyHashMap {\n    \n}\n\n\n/** value will always be non-negative. */\nfunc (this *MyHashMap) Put(key int, value int)  {\n    \n}\n\n\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\nfunc (this *MyHashMap) Get(key int) int {\n    \n}\n\n\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\nfunc (this *MyHashMap) Remove(key int)  {\n    \n}\n\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Put(key,value);\n * param_2 := obj.Get(key);\n * obj.Remove(key);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyHashMap() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** value will always be non-negative. */\n    def put(key: Int, value: Int) {\n        \n    }\n\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    def get(key: Int): Int = {\n        \n    }\n\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    def remove(key: Int) {\n        \n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyHashMap() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** value will always be non-negative. */\n    fun put(key: Int, value: Int) {\n        \n    }\n\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    fun get(key: Int): Int {\n        \n    }\n\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    fun remove(key: Int) {\n        \n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyHashMap {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashMap {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** value will always be non-negative. */\n    fn put(&self, key: i32, value: i32) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    fn remove(&self, key: i32) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap::new();\n * obj.put(key, value);\n * let ret_2: i32 = obj.get(key);\n * obj.remove(key);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyHashMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * value will always be non-negative.\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n  \n    /**\n     * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * Removes the mapping of the specified value key if this map contains a mapping for the key\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * $obj = MyHashMap();\n * $obj->put($key, $value);\n * $ret_2 = $obj->get($key);\n * $obj->remove($key);\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"44.2K\", \"totalSubmission\": \"77.5K\", \"totalAcceptedRaw\": 44176, \"totalSubmissionRaw\": 77502, \"acRate\": \"57.0%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"MyHashMap\",\"put\",\"put\",\"get\",\"get\",\"put\",\"get\", \"remove\", \"get\"]\n[[],[1,1],[2,2],[1],[3],[2,1],[2],[2],[2]]",
    "metaData": "{\r\n    \"classname\": \"MyHashMap\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"put\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"value will always be non-negative.\"\r\n        },\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\"\r\n        },\r\n        {\r\n            \"name\" : \"remove\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Removes the mapping of the specified value key if this map contains a mapping for the key\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}