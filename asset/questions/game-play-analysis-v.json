{
  "question": {
    "questionId": "1193",
    "questionFrontendId": "1097",
    "boundTopicId": null,
    "title": "Game Play Analysis V",
    "titleSlug": "game-play-analysis-v",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Hard",
    "likes": 7,
    "dislikes": 4,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Game Play Analysis IV\", \"titleSlug\": \"game-play-analysis-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"688\", \"totalSubmission\": \"1.5K\", \"totalAcceptedRaw\": 688, \"totalSubmissionRaw\": 1464, \"acRate\": \"47.0%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "{\"headers\":{\"Activity\":[\"player_id\",\"device_id\",\"event_date\",\"games_played\"]},\"rows\":{\"Activity\":[[1,2,\"2016-03-01\",5],[1,2,\"2016-03-02\",6],[2,3,\"2017-06-25\",1],[3,1,\"2016-03-01\",0],[3,4,\"2018-07-03\",5]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)\"\n  ],\n  \"mssql\": [\n    \"Create table Activity (player_id int, device_id int, event_date date, games_played int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Activity (player_id int, device_id int, event_date date, games_played int)\",\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)",
      "Truncate table Activity",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-01', '5')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-02', '6')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('2', '3', '2017-06-25', '1')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('3', '1', '2016-03-01', '0')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('3', '4', '2018-07-03', '5')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}