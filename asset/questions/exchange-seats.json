{
  "question": {
    "questionId": "626",
    "questionFrontendId": "626",
    "boundTopicId": null,
    "title": "Exchange Seats",
    "titleSlug": "exchange-seats",
    "content": "<p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students&#39; names and their corresponding seat ids.</p>\r\nThe column <b>id</b> is continuous increment.\r\n\r\n<p>&nbsp;</p>\r\nMary wants to change seats for the adjacent students.\r\n\r\n<p>&nbsp;</p>\r\nCan you write a SQL query to output the result for Mary?\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Abbot   |\r\n|    2    | Doris   |\r\n|    3    | Emerson |\r\n|    4    | Green   |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n</pre>\r\nFor the sample input, the output is:\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Doris   |\r\n|    2    | Abbot   |\r\n|    3    | Green   |\r\n|    4    | Emerson |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nIf the number of students is odd, there is no need to change the last one&#39;s seat.</p>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 197,
    "dislikes": 182,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "artistscript",
        "profileUrl": "/artistscript/",
        "avatarUrl": "https://www.gravatar.com/avatar/1d186f42681a157b2cce3ebf9f9c0911.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"29.2K\", \"totalSubmission\": \"52.5K\", \"totalAcceptedRaw\": 29219, \"totalSubmissionRaw\": 52492, \"acRate\": \"55.7%\"}",
    "hints": [],
    "solution": {
      "id": "195",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"seat\": [\"id\",\"student\"]}, \"rows\": {\"seat\": [[1,\"Abbot\"],[2,\"Doris\"],[3,\"Emerson\"],[4,\"Green\"],[5,\"Jeames\"]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists seat(id int, student varchar(255))\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table seat(id int, student varchar(255))\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table seat(id int, student varchar(255))\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists seat(id int, student varchar(255))",
      "Truncate table seat",
      "insert into seat (id, student) values ('1', 'Abbot')",
      "insert into seat (id, student) values ('2', 'Doris')",
      "insert into seat (id, student) values ('3', 'Emerson')",
      "insert into seat (id, student) values ('4', 'Green')",
      "insert into seat (id, student) values ('5', 'Jeames')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}