{
  "question": {
    "questionId": "859",
    "questionFrontendId": "641",
    "boundTopicId": null,
    "title": "Design Circular Deque",
    "titleSlug": "design-circular-deque",
    "content": "<p>Design your implementation of the circular double-ended queue (deque).</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularDeque(k)</code>: Constructor, set the size of the deque to be k.</li>\r\n\t<li><code>insertFront()</code>: Adds an item at the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>insertLast()</code>: Adds an item at the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteFront()</code>: Deletes an item from the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteLast()</code>: Deletes an item from the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>getFront()</code>: Gets the front item from the Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>getRear()</code>: Gets the last item from Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether Deque is empty or not.&nbsp;</li>\r\n\t<li><code>isFull()</code>: Checks whether Deque is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 2\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Deque library.</li>\r\n</ul>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 121,
    "dislikes": 30,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [
      {
        "username": "tinylic",
        "profileUrl": "/tinylic/",
        "avatarUrl": "https://www.gravatar.com/avatar/c8f3bf6706478175081358c2ced2ae2f.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Design",
        "slug": "design",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Queue",
        "slug": "queue",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyCircularDeque {\npublic:\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    MyCircularDeque(int k) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    bool insertFront(int value) {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    bool insertLast(int value) {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    bool deleteFront() {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    bool deleteLast() {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    int getFront() {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    int getRear() {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    bool isEmpty() {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    bool isFull() {\n        \n    }\n};\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque* obj = new MyCircularDeque(k);\n * bool param_1 = obj->insertFront(value);\n * bool param_2 = obj->insertLast(value);\n * bool param_3 = obj->deleteFront();\n * bool param_4 = obj->deleteLast();\n * int param_5 = obj->getFront();\n * int param_6 = obj->getRear();\n * bool param_7 = obj->isEmpty();\n * bool param_8 = obj->isFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    public MyCircularDeque(int k) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    public boolean insertFront(int value) {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    public boolean insertLast(int value) {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    public boolean deleteFront() {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    public boolean deleteLast() {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    public int getFront() {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    public int getRear() {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    public boolean isEmpty() {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    public boolean isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * boolean param_1 = obj.insertFront(value);\n * boolean param_2 = obj.insertLast(value);\n * boolean param_3 = obj.deleteFront();\n * boolean param_4 = obj.deleteLast();\n * int param_5 = obj.getFront();\n * int param_6 = obj.getRear();\n * boolean param_7 = obj.isEmpty();\n * boolean param_8 = obj.isFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyCircularDeque(object):\n\n    def __init__(self, k):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        :type k: int\n        \"\"\"\n        \n\n    def insertFront(self, value):\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def insertLast(self, value):\n        \"\"\"\n        Adds an item at the rear of Deque. Return true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def deleteFront(self):\n        \"\"\"\n        Deletes an item from the front of Deque. Return true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        \n\n    def deleteLast(self):\n        \"\"\"\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        \n\n    def getFront(self):\n        \"\"\"\n        Get the front item from the deque.\n        :rtype: int\n        \"\"\"\n        \n\n    def getRear(self):\n        \"\"\"\n        Get the last item from the deque.\n        :rtype: int\n        \"\"\"\n        \n\n    def isEmpty(self):\n        \"\"\"\n        Checks whether the circular deque is empty or not.\n        :rtype: bool\n        \"\"\"\n        \n\n    def isFull(self):\n        \"\"\"\n        Checks whether the circular deque is full or not.\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyCircularDeque:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        \n\n    def insertFront(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def insertLast(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def deleteFront(self) -> bool:\n        \"\"\"\n        Deletes an item from the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def deleteLast(self) -> bool:\n        \"\"\"\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def getFront(self) -> int:\n        \"\"\"\n        Get the front item from the deque.\n        \"\"\"\n        \n\n    def getRear(self) -> int:\n        \"\"\"\n        Get the last item from the deque.\n        \"\"\"\n        \n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular deque is empty or not.\n        \"\"\"\n        \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular deque is full or not.\n        \"\"\"\n        \n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyCircularDeque;\n\n/** Initialize your data structure here. Set the size of the deque to be k. */\n\nMyCircularDeque* myCircularDequeCreate(int k) {\n    \n}\n\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\nbool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {\n  \n}\n\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\nbool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {\n  \n}\n\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\nbool myCircularDequeDeleteFront(MyCircularDeque* obj) {\n  \n}\n\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\nbool myCircularDequeDeleteLast(MyCircularDeque* obj) {\n  \n}\n\n/** Get the front item from the deque. */\nint myCircularDequeGetFront(MyCircularDeque* obj) {\n  \n}\n\n/** Get the last item from the deque. */\nint myCircularDequeGetRear(MyCircularDeque* obj) {\n  \n}\n\n/** Checks whether the circular deque is empty or not. */\nbool myCircularDequeIsEmpty(MyCircularDeque* obj) {\n  \n}\n\n/** Checks whether the circular deque is full or not. */\nbool myCircularDequeIsFull(MyCircularDeque* obj) {\n  \n}\n\nvoid myCircularDequeFree(MyCircularDeque* obj) {\n    \n}\n\n/**\n * Your MyCircularDeque struct will be instantiated and called as such:\n * MyCircularDeque* obj = myCircularDequeCreate(k);\n * bool param_1 = myCircularDequeInsertFront(obj, value);\n \n * bool param_2 = myCircularDequeInsertLast(obj, value);\n \n * bool param_3 = myCircularDequeDeleteFront(obj);\n \n * bool param_4 = myCircularDequeDeleteLast(obj);\n \n * int param_5 = myCircularDequeGetFront(obj);\n \n * int param_6 = myCircularDequeGetRear(obj);\n \n * bool param_7 = myCircularDequeIsEmpty(obj);\n \n * bool param_8 = myCircularDequeIsFull(obj);\n \n * myCircularDequeFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    public MyCircularDeque(int k) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    public bool InsertFront(int value) {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    public bool InsertLast(int value) {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    public bool DeleteFront() {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    public bool DeleteLast() {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    public int GetFront() {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    public int GetRear() {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    public bool IsEmpty() {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    public bool IsFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * bool param_1 = obj.InsertFront(value);\n * bool param_2 = obj.InsertLast(value);\n * bool param_3 = obj.DeleteFront();\n * bool param_4 = obj.DeleteLast();\n * int param_5 = obj.GetFront();\n * int param_6 = obj.GetRear();\n * bool param_7 = obj.IsEmpty();\n * bool param_8 = obj.IsFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Initialize your data structure here. Set the size of the deque to be k.\n * @param {number} k\n */\nvar MyCircularDeque = function(k) {\n    \n};\n\n/**\n * Adds an item at the front of Deque. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertFront = function(value) {\n    \n};\n\n/**\n * Adds an item at the rear of Deque. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertLast = function(value) {\n    \n};\n\n/**\n * Deletes an item from the front of Deque. Return true if the operation is successful.\n * @return {boolean}\n */\nMyCircularDeque.prototype.deleteFront = function() {\n    \n};\n\n/**\n * Deletes an item from the rear of Deque. Return true if the operation is successful.\n * @return {boolean}\n */\nMyCircularDeque.prototype.deleteLast = function() {\n    \n};\n\n/**\n * Get the front item from the deque.\n * @return {number}\n */\nMyCircularDeque.prototype.getFront = function() {\n    \n};\n\n/**\n * Get the last item from the deque.\n * @return {number}\n */\nMyCircularDeque.prototype.getRear = function() {\n    \n};\n\n/**\n * Checks whether the circular deque is empty or not.\n * @return {boolean}\n */\nMyCircularDeque.prototype.isEmpty = function() {\n    \n};\n\n/**\n * Checks whether the circular deque is full or not.\n * @return {boolean}\n */\nMyCircularDeque.prototype.isFull = function() {\n    \n};\n\n/** \n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = new MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyCircularDeque\n\n=begin\n    Initialize your data structure here. Set the size of the deque to be k.\n    :type k: Integer\n=end\n    def initialize(k)\n        \n    end\n\n\n=begin\n    Adds an item at the front of Deque. Return true if the operation is successful.\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def insert_front(value)\n        \n    end\n\n\n=begin\n    Adds an item at the rear of Deque. Return true if the operation is successful.\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def insert_last(value)\n        \n    end\n\n\n=begin\n    Deletes an item from the front of Deque. Return true if the operation is successful.\n    :rtype: Boolean\n=end\n    def delete_front()\n        \n    end\n\n\n=begin\n    Deletes an item from the rear of Deque. Return true if the operation is successful.\n    :rtype: Boolean\n=end\n    def delete_last()\n        \n    end\n\n\n=begin\n    Get the front item from the deque.\n    :rtype: Integer\n=end\n    def get_front()\n        \n    end\n\n\n=begin\n    Get the last item from the deque.\n    :rtype: Integer\n=end\n    def get_rear()\n        \n    end\n\n\n=begin\n    Checks whether the circular deque is empty or not.\n    :rtype: Boolean\n=end\n    def is_empty()\n        \n    end\n\n\n=begin\n    Checks whether the circular deque is full or not.\n    :rtype: Boolean\n=end\n    def is_full()\n        \n    end\n\n\nend\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque.new(k)\n# param_1 = obj.insert_front(value)\n# param_2 = obj.insert_last(value)\n# param_3 = obj.delete_front()\n# param_4 = obj.delete_last()\n# param_5 = obj.get_front()\n# param_6 = obj.get_rear()\n# param_7 = obj.is_empty()\n# param_8 = obj.is_full()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    init(_ k: Int) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    func insertFront(_ value: Int) -> Bool {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    func insertLast(_ value: Int) -> Bool {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    func deleteFront() -> Bool {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    func deleteLast() -> Bool {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    func getFront() -> Int {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    func getRear() -> Int {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    func isEmpty() -> Bool {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    func isFull() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * let obj = MyCircularDeque(k)\n * let ret_1: Bool = obj.insertFront(value)\n * let ret_2: Bool = obj.insertLast(value)\n * let ret_3: Bool = obj.deleteFront()\n * let ret_4: Bool = obj.deleteLast()\n * let ret_5: Int = obj.getFront()\n * let ret_6: Int = obj.getRear()\n * let ret_7: Bool = obj.isEmpty()\n * let ret_8: Bool = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyCircularDeque struct {\n    \n}\n\n\n/** Initialize your data structure here. Set the size of the deque to be k. */\nfunc Constructor(k int) MyCircularDeque {\n    \n}\n\n\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n    \n}\n\n\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n    \n}\n\n\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) DeleteFront() bool {\n    \n}\n\n\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) DeleteLast() bool {\n    \n}\n\n\n/** Get the front item from the deque. */\nfunc (this *MyCircularDeque) GetFront() int {\n    \n}\n\n\n/** Get the last item from the deque. */\nfunc (this *MyCircularDeque) GetRear() int {\n    \n}\n\n\n/** Checks whether the circular deque is empty or not. */\nfunc (this *MyCircularDeque) IsEmpty() bool {\n    \n}\n\n\n/** Checks whether the circular deque is full or not. */\nfunc (this *MyCircularDeque) IsFull() bool {\n    \n}\n\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.InsertFront(value);\n * param_2 := obj.InsertLast(value);\n * param_3 := obj.DeleteFront();\n * param_4 := obj.DeleteLast();\n * param_5 := obj.GetFront();\n * param_6 := obj.GetRear();\n * param_7 := obj.IsEmpty();\n * param_8 := obj.IsFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyCircularDeque(_k: Int) {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    \n\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    def insertFront(value: Int): Boolean = {\n        \n    }\n\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    def insertLast(value: Int): Boolean = {\n        \n    }\n\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    def deleteFront(): Boolean = {\n        \n    }\n\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    def deleteLast(): Boolean = {\n        \n    }\n\n    /** Get the front item from the deque. */\n    def getFront(): Int = {\n        \n    }\n\n    /** Get the last item from the deque. */\n    def getRear(): Int = {\n        \n    }\n\n    /** Checks whether the circular deque is empty or not. */\n    def isEmpty(): Boolean = {\n        \n    }\n\n    /** Checks whether the circular deque is full or not. */\n    def isFull(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = new MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyCircularDeque(k: Int) {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    \n\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    fun insertFront(value: Int): Boolean {\n        \n    }\n\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    fun insertLast(value: Int): Boolean {\n        \n    }\n\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    fun deleteFront(): Boolean {\n        \n    }\n\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    fun deleteLast(): Boolean {\n        \n    }\n\n    /** Get the front item from the deque. */\n    fun getFront(): Int {\n        \n    }\n\n    /** Get the last item from the deque. */\n    fun getRear(): Int {\n        \n    }\n\n    /** Checks whether the circular deque is empty or not. */\n    fun isEmpty(): Boolean {\n        \n    }\n\n    /** Checks whether the circular deque is full or not. */\n    fun isFull(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyCircularDeque {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    fn new(k: i32) -> Self {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    fn insert_front(&self, value: i32) -> bool {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    fn insert_last(&self, value: i32) -> bool {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    fn delete_front(&self) -> bool {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    fn delete_last(&self) -> bool {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    fn get_front(&self) -> i32 {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    fn get_rear(&self) -> i32 {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    fn is_empty(&self) -> bool {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    fn is_full(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * let obj = MyCircularDeque::new(k);\n * let ret_1: bool = obj.insert_front(value);\n * let ret_2: bool = obj.insert_last(value);\n * let ret_3: bool = obj.delete_front();\n * let ret_4: bool = obj.delete_last();\n * let ret_5: i32 = obj.get_front();\n * let ret_6: i32 = obj.get_rear();\n * let ret_7: bool = obj.is_empty();\n * let ret_8: bool = obj.is_full();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyCircularDeque {\n    /**\n     * Initialize your data structure here. Set the size of the deque to be k.\n     * @param Integer $k\n     */\n    function __construct($k) {\n        \n    }\n  \n    /**\n     * Adds an item at the front of Deque. Return true if the operation is successful.\n     * @param Integer $value\n     * @return Boolean\n     */\n    function insertFront($value) {\n        \n    }\n  \n    /**\n     * Adds an item at the rear of Deque. Return true if the operation is successful.\n     * @param Integer $value\n     * @return Boolean\n     */\n    function insertLast($value) {\n        \n    }\n  \n    /**\n     * Deletes an item from the front of Deque. Return true if the operation is successful.\n     * @return Boolean\n     */\n    function deleteFront() {\n        \n    }\n  \n    /**\n     * Deletes an item from the rear of Deque. Return true if the operation is successful.\n     * @return Boolean\n     */\n    function deleteLast() {\n        \n    }\n  \n    /**\n     * Get the front item from the deque.\n     * @return Integer\n     */\n    function getFront() {\n        \n    }\n  \n    /**\n     * Get the last item from the deque.\n     * @return Integer\n     */\n    function getRear() {\n        \n    }\n  \n    /**\n     * Checks whether the circular deque is empty or not.\n     * @return Boolean\n     */\n    function isEmpty() {\n        \n    }\n  \n    /**\n     * Checks whether the circular deque is full or not.\n     * @return Boolean\n     */\n    function isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * $obj = MyCircularDeque($k);\n * $ret_1 = $obj->insertFront($value);\n * $ret_2 = $obj->insertLast($value);\n * $ret_3 = $obj->deleteFront();\n * $ret_4 = $obj->deleteLast();\n * $ret_5 = $obj->getFront();\n * $ret_6 = $obj->getRear();\n * $ret_7 = $obj->isEmpty();\n * $ret_8 = $obj->isFull();\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"8.6K\", \"totalSubmission\": \"17.3K\", \"totalAcceptedRaw\": 8641, \"totalSubmissionRaw\": 17341, \"acRate\": \"49.8%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"MyCircularDeque\",\"insertLast\",\"insertLast\",\"insertFront\",\"insertFront\",\"getRear\",\"isFull\",\"deleteLast\",\"insertFront\",\"getFront\"]\n[[3],[1],[2],[3],[4],[],[],[],[4],[]]",
    "metaData": "{\r\n    \"classname\": \"MyCircularDeque\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"k\"\r\n            }\r\n        ],\r\n        \"comment\": \"Initialize your data structure here. Set the size of the deque to be k.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insertFront\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Adds an item at the front of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"insertLast\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Adds an item at the rear of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteFront\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Deletes an item from the front of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteLast\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Deletes an item from the rear of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"getFront\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the front item from the deque.\"\r\n        },\r\n        {\r\n            \"name\" : \"getRear\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the last item from the deque.\"\r\n        },\r\n        {\r\n            \"name\" : \"isEmpty\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular deque is empty or not.\"\r\n        },\r\n        {\r\n            \"name\" : \"isFull\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular deque is full or not.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}