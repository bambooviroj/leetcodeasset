{
  "question": {
    "questionId": "1181",
    "questionFrontendId": "534",
    "boundTopicId": null,
    "title": "Game Play Analysis III",
    "titleSlug": "game-play-analysis-iii",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 21,
    "dislikes": 0,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Game Play Analysis II\", \"titleSlug\": \"game-play-analysis-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Game Play Analysis IV\", \"titleSlug\": \"game-play-analysis-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"2.2K\", \"totalSubmission\": \"3.4K\", \"totalAcceptedRaw\": 2188, \"totalSubmissionRaw\": 3367, \"acRate\": \"65.0%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "{\"headers\":{\"Activity\":[\"player_id\",\"device_id\",\"event_date\",\"games_played\"]},\"rows\":{\"Activity\":[[1,2,\"2016-03-01\",5],[1,2,\"2016-05-02\",6],[1,3,\"2017-06-25\",1],[3,1,\"2016-03-02\",0],[3,4,\"2018-07-03\",5]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)\"\n  ],\n  \"mssql\": [\n    \"Create table Activity (player_id int, device_id int, event_date date, games_played int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Activity (player_id int, device_id int, event_date date, games_played int)\",\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)",
      "Truncate table Activity",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-01', '5')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-05-02', '6')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('1', '3', '2017-06-25', '1')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('3', '1', '2016-03-02', '0')",
      "insert into Activity (player_id, device_id, event_date, games_played) values ('3', '4', '2018-07-03', '5')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}