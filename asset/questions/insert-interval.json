{
  "question": {
    "questionId": "57",
    "questionFrontendId": "57",
    "boundTopicId": null,
    "title": "Insert Interval",
    "titleSlug": "insert-interval",
    "content": "<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>\r\n\r\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\r\n<strong>Output:</strong> [[1,5],[6,9]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\r\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\r\n<strong>Explanation:</strong> Because the new interval <code>[4,8]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</pre>\r\n\r\n<p><strong>NOTE:</strong>&nbsp;input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Hard",
    "likes": 968,
    "dislikes": 126,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
    "contributors": [],
    "langToValidPlayground": "{\"cpp\": false, \"java\": true, \"python\": true, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Sort",
        "slug": "sort",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\r\npublic:\r\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\r\n        \r\n    }\r\n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\r\n    public int[][] insert(int[][] intervals, int[] newInterval) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\r\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n    \n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} intervals\r\n# @param {Integer[]} new_interval\r\n# @return {Integer[][]}\r\ndef insert(intervals, new_interval)\r\n    \r\nend",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\r\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func insert(intervals [][]int, newInterval []int) [][]int {\r\n    \r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\r\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\r\n    fun insert(intervals: Array<IntArray>, newInterval: IntArray): Array<IntArray> {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn insert(intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n        \n    }\n}",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"191.7K\", \"totalSubmission\": \"605.1K\", \"totalAcceptedRaw\": 191747, \"totalSubmissionRaw\": 605076, \"acRate\": \"31.7%\"}",
    "hints": [],
    "solution": {
      "id": "728",
      "canSeeDetail": false,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "[[1,3],[6,9]]\n[2,5]",
    "metaData": "{\r\n  \"name\": \"insert\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"intervals\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"newInterval\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\"\r\n  }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}