{
  "question": {
    "questionId": "1268",
    "questionFrontendId": "1158",
    "boundTopicId": null,
    "title": "Market Analysis I",
    "titleSlug": "market-analysis-i",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 4,
    "dislikes": 3,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"738\", \"totalSubmission\": \"1.5K\", \"totalAcceptedRaw\": 738, \"totalSubmissionRaw\": 1474, \"acRate\": \"50.1%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "{\"headers\":{\"Users\":[\"user_id\",\"join_date\",\"favorite_brand\"],\"Orders\":[\"order_id\",\"order_date\",\"item_id\",\"buyer_id\",\"seller_id\"],\"Items\":[\"item_id\",\"item_brand\"]},\"rows\":{\"Users\":[[1,\"2018-01-01\",\"Lenovo\"],[2,\"2018-02-09\",\"Samsung\"],[3,\"2018-01-19\",\"LG\"],[4,\"2018-05-21\",\"HP\"]],\"Orders\":[[1,\"2019-08-01\",4,1,2],[2,\"2018-08-02\",2,1,3],[3,\"2019-08-03\",3,2,3],[4,\"2018-08-04\",1,4,2],[5,\"2018-08-04\",1,3,4],[6,\"2019-08-05\",2,2,4]],\"Items\":[[1,\"Samsung\"],[2,\"Lenovo\"],[3,\"LG\"],[4,\"HP\"]]}}",
    "metaData": "{\n  \"mysql\": [\n     \"Create table If Not Exists Users (user_id int, join_date date, favorite_brand varchar(10))\",\n     \"create table if not exists Orders (order_id int, order_date date, item_id int, buyer_id int, seller_id int)\",\n     \"create table if not exists Items (item_id int, item_brand varchar(10))\"\n  ],\n  \"mssql\": [\n     \"Create table Users (user_id int, join_date date, favorite_brand varchar(10))\",\n     \"create table Orders (order_id int, order_date date, item_id int, buyer_id int, seller_id int)\",\n     \"create table Items (item_id int, item_brand varchar(10))\"\n  ],\n  \"oraclesql\": [\n     \"Create table Users (user_id int, join_date date, favorite_brand varchar(10))\",\n     \"create table Orders (order_id int, order_date date, item_id int, buyer_id int, seller_id int)\",\n     \"create table Items (item_id int, item_brand varchar(10))\",\n     \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Users (user_id int, join_date date, favorite_brand varchar(10))",
      "create table if not exists Orders (order_id int, order_date date, item_id int, buyer_id int, seller_id int)",
      "create table if not exists Items (item_id int, item_brand varchar(10))",
      "Truncate table Users",
      "insert into Users (user_id, join_date, favorite_brand) values ('1', '2018-01-01', 'Lenovo')",
      "insert into Users (user_id, join_date, favorite_brand) values ('2', '2018-02-09', 'Samsung')",
      "insert into Users (user_id, join_date, favorite_brand) values ('3', '2018-01-19', 'LG')",
      "insert into Users (user_id, join_date, favorite_brand) values ('4', '2018-05-21', 'HP')",
      "Truncate table Orders",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('1', '2019-08-01', '4', '1', '2')",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('2', '2018-08-02', '2', '1', '3')",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('3', '2019-08-03', '3', '2', '3')",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('4', '2018-08-04', '1', '4', '2')",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('5', '2018-08-04', '1', '3', '4')",
      "insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values ('6', '2019-08-05', '2', '2', '4')",
      "Truncate table Items",
      "insert into Items (item_id, item_brand) values ('1', 'Samsung')",
      "insert into Items (item_id, item_brand) values ('2', 'Lenovo')",
      "insert into Items (item_id, item_brand) values ('3', 'LG')",
      "insert into Items (item_id, item_brand) values ('4', 'HP')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}