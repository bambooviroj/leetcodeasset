{
  "question": {
    "questionId": "1063",
    "questionFrontendId": "1014",
    "boundTopicId": null,
    "title": "Best Sightseeing Pair",
    "titleSlug": "best-sightseeing-pair",
    "content": "<p>Given an array <code>A</code> of positive integers, <code>A[i]</code> represents the value of the <code>i</code>-th sightseeing spot, and two&nbsp;sightseeing spots <code>i</code> and <code>j</code>&nbsp;have distance <code>j - i</code>&nbsp;between them.</p>\r\n\r\n<p>The <em>score</em>&nbsp;of a pair (<code>i &lt; j</code>) of sightseeing spots is (<code>A[i] + A[j] + i&nbsp;- j)</code> : the sum of the values of the sightseeing spots, <strong>minus</strong> the distance between them.</p>\r\n\r\n<p>Return the maximum score of a pair of sightseeing spots.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,1,5,2,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11\r\n<strong>Explanation:</strong> i = 0, j = 2, </span><code>A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 1000</code></li>\r\n</ol>",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 246,
    "dislikes": 11,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "lee215",
        "profileUrl": "/lee215/",
        "avatarUrl": "https://assets.leetcode.com/users/lee215/avatar_1551541889.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": true, \"java\": true, \"python\": true, \"python3\": true, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxScoreSightseeingPair(vector<int>& A) {\n        \n    }\n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\r\n    public int maxScoreSightseeingPair(int[] A) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxScoreSightseeingPair(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        ",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\nint maxScoreSightseeingPair(int* A, int ASize){\n\n}\n\n",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\r\n    public int MaxScoreSightseeingPair(int[] A) {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxScoreSightseeingPair = function(A) {\n    \n};",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} a\r\n# @return {Integer}\r\ndef max_score_sightseeing_pair(a)\r\n    \r\nend",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\r\n    func maxScoreSightseeingPair(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxScoreSightseeingPair(A []int) int {\r\n    \r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\r\n    def maxScoreSightseeingPair(A: Array[Int]): Int = {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\r\n    fun maxScoreSightseeingPair(A: IntArray): Int {\r\n        \r\n    }\r\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_score_sightseeing_pair(a: Vec<i32>) -> i32 {\n        \n    }\n}",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function maxScoreSightseeingPair($A) {\n        \n    }\n}",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"9.4K\", \"totalSubmission\": \"18.7K\", \"totalAcceptedRaw\": 9377, \"totalSubmissionRaw\": 18658, \"acRate\": \"50.3%\"}",
    "hints": [
      "Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?"
    ],
    "solution": null,
    "status": null,
    "sampleTestCase": "[8,1,5,2,6]",
    "metaData": "{\r\n  \"name\": \"maxScoreSightseeingPair\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}