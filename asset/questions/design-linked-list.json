{
  "question": {
    "questionId": "838",
    "questionFrontendId": "707",
    "boundTopicId": null,
    "title": "Design Linked List",
    "titleSlug": "design-linked-list",
    "content": "<p>Design your&nbsp;implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly&nbsp;linked list should have two attributes: <code>val</code>&nbsp;and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code>&nbsp;is&nbsp;a&nbsp;pointer/reference to the next node. If you want to use the doubly linked list,&nbsp;you will need&nbsp;one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\n\n<p>Implement these functions in your linked list class:</p>\n\n<ul>\n\t<li>get(index) : Get the value of&nbsp;the <code>index</code>-th&nbsp;node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li>addAtHead(val) : Add a node of value <code>val</code>&nbsp;before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li>addAtTail(val) : Append a node of value <code>val</code>&nbsp;to the last element of the linked list.</li>\n\t<li>addAtIndex(index, val) : Add a node of value <code>val</code>&nbsp;before the <code>index</code>-th&nbsp;node in the linked list.&nbsp;If <code>index</code>&nbsp;equals&nbsp;to the length of&nbsp;linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. If index is negative, the node will be inserted at the head&nbsp;of the list.</li>\n\t<li>deleteAtIndex(index) : Delete&nbsp;the <code>index</code>-th&nbsp;node in the linked list, if the index is valid.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre>\nMyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3\nlinkedList.get(1);            // returns 2\nlinkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3\nlinkedList.get(1);&nbsp;&nbsp;&nbsp;         // returns 3\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>All values will be in the range of <code>[1, 1000]</code>.</li>\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 1000]</code>.</li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n</ul>\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Easy",
    "likes": 356,
    "dislikes": 461,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "1337c0d3r",
        "profileUrl": "/1337c0d3r/",
        "avatarUrl": "https://assets.leetcode.com/users/1337c0d3r/avatar_1547177258.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Linked List",
        "slug": "linked-list",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Design",
        "slug": "design",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyLinkedList {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    int get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    void addAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    void addAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    void addAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    void deleteAtIndex(int index) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList* obj = new MyLinkedList();\r\n * int param_1 = obj->get(index);\r\n * obj->addAtHead(val);\r\n * obj->addAtTail(val);\r\n * obj->addAtIndex(index,val);\r\n * obj->deleteAtIndex(index);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyLinkedList {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    public int get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    public void addAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    public void addAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    public void addAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    public void deleteAtIndex(int index) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList obj = new MyLinkedList();\r\n * int param_1 = obj.get(index);\r\n * obj.addAtHead(val);\r\n * obj.addAtTail(val);\r\n * obj.addAtIndex(index,val);\r\n * obj.deleteAtIndex(index);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyLinkedList(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def get(self, index):\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        :type index: int\n        :rtype: int\n        \"\"\"\n        \n\n    def addAtHead(self, val):\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtTail(self, val):\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        :type index: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyLinkedList:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"\n        \n\n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        \"\"\"\n        \n\n    def addAtTail(self, val: int) -> None:\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        \"\"\"\n        \n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        \"\"\"\n        \n\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        \"\"\"\n        \n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyLinkedList;\n\n/** Initialize your data structure here. */\n\nMyLinkedList* myLinkedListCreate() {\n    \n}\n\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\nint myLinkedListGet(MyLinkedList* obj, int index) {\n  \n}\n\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\n  \n}\n\n/** Append a node of value val to the last element of the linked list. */\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\n  \n}\n\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\n  \n}\n\n/** Delete the index-th node in the linked list, if the index is valid. */\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\n  \n}\n\nvoid myLinkedListFree(MyLinkedList* obj) {\n    \n}\n\n/**\n * Your MyLinkedList struct will be instantiated and called as such:\n * MyLinkedList* obj = myLinkedListCreate();\n * int param_1 = myLinkedListGet(obj, index);\n \n * myLinkedListAddAtHead(obj, val);\n \n * myLinkedListAddAtTail(obj, val);\n \n * myLinkedListAddAtIndex(obj, index, val);\n \n * myLinkedListDeleteAtIndex(obj, index);\n \n * myLinkedListFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyLinkedList {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    public int Get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    public void AddAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    public void AddAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    public void AddAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    public void DeleteAtIndex(int index) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList obj = new MyLinkedList();\r\n * int param_1 = obj.Get(index);\r\n * obj.AddAtHead(val);\r\n * obj.AddAtTail(val);\r\n * obj.AddAtIndex(index,val);\r\n * obj.DeleteAtIndex(index);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Initialize your data structure here.\n */\nvar MyLinkedList = function() {\n    \n};\n\n/**\n * Get the value of the index-th node in the linked list. If the index is invalid, return -1. \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n    \n};\n\n/**\n * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n    \n};\n\n/**\n * Append a node of value val to the last element of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtTail = function(val) {\n    \n};\n\n/**\n * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtIndex = function(index, val) {\n    \n};\n\n/**\n * Delete the index-th node in the linked list, if the index is valid. \n * @param {number} index\n * @return {void}\n */\nMyLinkedList.prototype.deleteAtIndex = function(index) {\n    \n};\n\n/** \n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyLinkedList\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the value of the index-th node in the linked list. If the index is invalid, return -1.\r\n    :type index: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(index)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_head(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Append a node of value val to the last element of the linked list.\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_tail(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\r\n    :type index: Integer\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_index(index, val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Delete the index-th node in the linked list, if the index is valid.\r\n    :type index: Integer\r\n    :rtype: Void\r\n=end\r\n    def delete_at_index(index)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyLinkedList object will be instantiated and called as such:\r\n# obj = MyLinkedList.new()\r\n# param_1 = obj.get(index)\r\n# obj.add_at_head(val)\r\n# obj.add_at_tail(val)\r\n# obj.add_at_index(index, val)\r\n# obj.delete_at_index(index)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\r\nclass MyLinkedList {\r\n\r\n    /** Initialize your data structure here. */\r\n    init() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    func get(_ index: Int) -> Int {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    func addAtHead(_ val: Int) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    func addAtTail(_ val: Int) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    func addAtIndex(_ index: Int, _ val: Int) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    func deleteAtIndex(_ index: Int) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * let obj = MyLinkedList()\r\n * let ret_1: Int = obj.get(index)\r\n * obj.addAtHead(val)\r\n * obj.addAtTail(val)\r\n * obj.addAtIndex(index, val)\r\n * obj.deleteAtIndex(index)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyLinkedList struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyLinkedList {\r\n    \r\n}\r\n\r\n\r\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\nfunc (this *MyLinkedList) Get(index int) int {\r\n    \r\n}\r\n\r\n\r\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\nfunc (this *MyLinkedList) AddAtHead(val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Append a node of value val to the last element of the linked list. */\r\nfunc (this *MyLinkedList) AddAtTail(val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Delete the index-th node in the linked list, if the index is valid. */\r\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Get(index);\r\n * obj.AddAtHead(val);\r\n * obj.AddAtTail(val);\r\n * obj.AddAtIndex(index,val);\r\n * obj.DeleteAtIndex(index);\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyLinkedList() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    def get(index: Int): Int = {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    def addAtHead(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Append a node of value val to the last element of the linked list. */\r\n    def addAtTail(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    def addAtIndex(index: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    def deleteAtIndex(index: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * var obj = new MyLinkedList()\r\n * var param_1 = obj.get(index)\r\n * obj.addAtHead(`val`)\r\n * obj.addAtTail(`val`)\r\n * obj.addAtIndex(index,`val`)\r\n * obj.deleteAtIndex(index)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyLinkedList() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    fun get(index: Int): Int {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    fun addAtHead(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Append a node of value val to the last element of the linked list. */\r\n    fun addAtTail(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    fun addAtIndex(index: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    fun deleteAtIndex(index: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * var obj = MyLinkedList()\r\n * var param_1 = obj.get(index)\r\n * obj.addAtHead(`val`)\r\n * obj.addAtTail(`val`)\r\n * obj.addAtIndex(index,`val`)\r\n * obj.deleteAtIndex(index)\r\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyLinkedList {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    fn get(&self, index: i32) -> i32 {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    fn add_at_head(&self, val: i32) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    fn add_at_tail(&self, val: i32) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    fn add_at_index(&self, index: i32, val: i32) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    fn delete_at_index(&self, index: i32) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyLinkedList {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n        \n    }\n  \n    /**\n     * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtHead($val) {\n        \n    }\n  \n    /**\n     * Append a node of value val to the last element of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtTail($val) {\n        \n    }\n  \n    /**\n     * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtIndex($index, $val) {\n        \n    }\n  \n    /**\n     * Delete the index-th node in the linked list, if the index is valid.\n     * @param Integer $index\n     * @return NULL\n     */\n    function deleteAtIndex($index) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * $obj = MyLinkedList();\n * $ret_1 = $obj->get($index);\n * $obj->addAtHead($val);\n * $obj->addAtTail($val);\n * $obj->addAtIndex($index, $val);\n * $obj->deleteAtIndex($index);\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"32.7K\", \"totalSubmission\": \"155.7K\", \"totalAcceptedRaw\": 32655, \"totalSubmissionRaw\": 155659, \"acRate\": \"21.0%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]",
    "metaData": "{\r\n    \"classname\": \"MyLinkedList\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the value of the index-th node in the linked list. If the index is invalid, return -1.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtHead\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtTail\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Append a node of value val to the last element of the linked list.\"\r\n        },\r\n        {\r\n            \"name\" : \"addAtIndex\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteAtIndex\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"index\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Delete the index-th node in the linked list, if the index is valid.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}