{
  "question": {
    "questionId": "574",
    "questionFrontendId": "574",
    "boundTopicId": null,
    "title": "Winning Candidate",
    "titleSlug": "winning-candidate",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 24,
    "dislikes": 199,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "Douglas1612",
        "profileUrl": "/douglas1612/",
        "avatarUrl": "https://www.gravatar.com/avatar/8e60a4b596b7a8ba118c776bac2a0b04.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"10.7K\", \"totalSubmission\": \"28.6K\", \"totalAcceptedRaw\": 10710, \"totalSubmissionRaw\": 28594, \"acRate\": \"37.5%\"}",
    "hints": [],
    "solution": {
      "id": "208",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"Candidate\": [\"id\", \"Name\"], \"Vote\": [\"id\", \"CandidateId\"]}, \"rows\": {\"Candidate\": [[1, \"A\"], [2, \"B\"], [3, \"C\"], [4, \"D\"], [5, \"E\"]], \"Vote\": [[1, 2],[2, 4],[3, 3],[4, 2],[5, 5]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Candidate (id int, Name varchar(255))\",\n    \"Create table If Not Exists Vote (id int, CandidateId int)\"\n  ],\n  \"mssql\": [\n    \"Create table Candidate (id int, Name varchar(255))\",\n    \"Create table Vote (id int, CandidateId int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Candidate (id int, Name varchar(255))\",\n    \"Create table Vote (id int, CandidateId int)\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Candidate (id int, Name varchar(255))",
      "Create table If Not Exists Vote (id int, CandidateId int)",
      "Truncate table Candidate",
      "insert into Candidate (id, Name) values ('1', 'A')",
      "insert into Candidate (id, Name) values ('2', 'B')",
      "insert into Candidate (id, Name) values ('3', 'C')",
      "insert into Candidate (id, Name) values ('4', 'D')",
      "insert into Candidate (id, Name) values ('5', 'E')",
      "Truncate table Vote",
      "insert into Vote (id, CandidateId) values ('1', '2')",
      "insert into Vote (id, CandidateId) values ('2', '4')",
      "insert into Vote (id, CandidateId) values ('3', '3')",
      "insert into Vote (id, CandidateId) values ('4', '2')",
      "insert into Vote (id, CandidateId) values ('5', '5')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}