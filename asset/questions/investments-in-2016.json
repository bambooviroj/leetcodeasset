{
  "question": {
    "questionId": "585",
    "questionFrontendId": "585",
    "boundTopicId": null,
    "title": "Investments in 2016",
    "titleSlug": "investments-in-2016",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 59,
    "dislikes": 44,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "Mr-Bin",
        "profileUrl": "/mr-bin/",
        "avatarUrl": "https://assets.leetcode.com/users/mr-bin/avatar_1547655304.png",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"18.9K\", \"totalAcceptedRaw\": 9219, \"totalSubmissionRaw\": 18927, \"acRate\": \"48.7%\"}",
    "hints": [
      "Make the (LAT, LON) a pair to represent the location information"
    ],
    "solution": {
      "id": "130",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\":{\"insurance\":[\"PID\",\"TIV_2015\",\"TIV_2016\",\"LAT\",\"LON\"]},\"rows\":{\"insurance\":[[1,10,5,10,10],[2,20,20,20,20],[3,10,30,20,20],[4,10,40,40,40]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"CREATE TABLE IF NOT EXISTS insurance (PID INTEGER(11), TIV_2015 NUMERIC(15,2), TIV_2016 NUMERIC(15,2), LAT NUMERIC(5,2), LON NUMERIC(5,2) )\"\r\n  ],\r\n  \"mssql\": [\r\n    \"CREATE TABLE insurance (PID INT, TIV_2015 DECIMAL(15,2), TIV_2016 DECIMAL(15,2), LAT DECIMAL(5,2), LON DECIMAL(5,2) )\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"CREATE TABLE insurance (PID INT, TIV_2015 NUMBER(15,2), TIV_2016 NUMBER(15,2), LAT NUMBER(5,2), LON NUMBER(5,2) )\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "CREATE TABLE IF NOT EXISTS insurance (PID INTEGER(11), TIV_2015 NUMERIC(15,2), TIV_2016 NUMERIC(15,2), LAT NUMERIC(5,2), LON NUMERIC(5,2) )",
      "Truncate table insurance",
      "insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values ('1', '10', '5', '10', '10')",
      "insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values ('2', '20', '20', '20', '20')",
      "insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values ('3', '10', '30', '20', '20')",
      "insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values ('4', '10', '40', '40', '40')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}