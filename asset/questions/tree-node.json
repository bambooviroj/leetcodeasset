{
  "question": {
    "questionId": "608",
    "questionFrontendId": "608",
    "boundTopicId": null,
    "title": "Tree Node",
    "titleSlug": "tree-node",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 116,
    "dislikes": 7,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "artistscript",
        "profileUrl": "/artistscript/",
        "avatarUrl": "https://www.gravatar.com/avatar/1d186f42681a157b2cce3ebf9f9c0911.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"11.1K\", \"totalSubmission\": \"18.5K\", \"totalAcceptedRaw\": 11080, \"totalSubmissionRaw\": 18482, \"acRate\": \"60.0%\"}",
    "hints": [
      "You can judge the node type by querying whether the node's id shows up in p_id column and whether the node's p_id is null."
    ],
    "solution": {
      "id": "201",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"tree\": [\"id\", \"p_id\"]}, \"rows\": {\"tree\": [[1,null],[2,1],[3,1],[4,2],[5,2]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists tree (id int, p_id int)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table tree (id int, p_id int)\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table tree (id int, p_id int)\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists tree (id int, p_id int)",
      "Truncate table tree",
      "insert into tree (id, p_id) values ('1', 'None')",
      "insert into tree (id, p_id) values ('2', '1')",
      "insert into tree (id, p_id) values ('3', '1')",
      "insert into tree (id, p_id) values ('4', '2')",
      "insert into tree (id, p_id) values ('5', '2')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}