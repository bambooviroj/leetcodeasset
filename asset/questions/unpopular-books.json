{
  "question": {
    "questionId": "1198",
    "questionFrontendId": "1098",
    "boundTopicId": null,
    "title": "Unpopular Books",
    "titleSlug": "unpopular-books",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 12,
    "dislikes": 14,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"1.4K\", \"totalSubmission\": \"3.2K\", \"totalAcceptedRaw\": 1368, \"totalSubmissionRaw\": 3189, \"acRate\": \"42.9%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "{\"headers\":{\"Books\":[\"book_id\",\"name\",\"available_from\"],\"Orders\":[\"order_id\",\"book_id\",\"quantity\",\"dispatch_date\"]},\"rows\":{\"Books\":[[1,\"Kalila And Demna\",\"2010-01-01\"],[2,\"28 Letters\",\"2012-05-12\"],[3,\"The Hobbit\",\"2019-06-10\"],[4,\"13 Reasons Why\",\"2019-06-01\"],[5,\"The Hunger Games\",\"2008-09-21\"]],\"Orders\":[[1,1,2,\"2018-07-26\"],[2,1,1,\"2018-11-05\"],[3,3,8,\"2019-06-11\"],[4,4,6,\"2019-06-05\"],[5,4,5,\"2019-06-20\"],[6,5,9,\"2009-02-02\"],[7,5,8,\"2010-04-13\"]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Books (book_id int, name varchar(50), available_from date)\",\n    \"Create table If Not Exists Orders (order_id int, book_id int, quantity int, dispatch_date date)\"\n  ],\n  \"mssql\": [\n    \"Create table Books (book_id int, name varchar(50), available_from date)\",\n    \"Create table Orders (order_id int, book_id int, quantity int, dispatch_date date)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Books (book_id int, name varchar(50), available_from date)\",\n    \"Create table Orders (order_id int, book_id int, quantity int, dispatch_date date)\",\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Books (book_id int, name varchar(50), available_from date)",
      "Create table If Not Exists Orders (order_id int, book_id int, quantity int, dispatch_date date)",
      "Truncate table Books",
      "insert into Books (book_id, name, available_from) values ('1', 'Kalila And Demna', '2010-01-01')",
      "insert into Books (book_id, name, available_from) values ('2', '28 Letters', '2012-05-12')",
      "insert into Books (book_id, name, available_from) values ('3', 'The Hobbit', '2019-06-10')",
      "insert into Books (book_id, name, available_from) values ('4', '13 Reasons Why', '2019-06-01')",
      "insert into Books (book_id, name, available_from) values ('5', 'The Hunger Games', '2008-09-21')",
      "Truncate table Orders",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('1', '1', '2', '2018-07-26')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('2', '1', '1', '2018-11-05')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('3', '3', '8', '2019-06-11')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('4', '4', '6', '2019-06-05')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('5', '4', '5', '2019-06-20')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('6', '5', '9', '2009-02-02')",
      "insert into Orders (order_id, book_id, quantity, dispatch_date) values ('7', '5', '8', '2010-04-13')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}