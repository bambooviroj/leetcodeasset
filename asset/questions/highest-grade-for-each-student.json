{
  "question": {
    "questionId": "1214",
    "questionFrontendId": "1112",
    "boundTopicId": null,
    "title": "Highest Grade For Each Student",
    "titleSlug": "highest-grade-for-each-student",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Medium",
    "likes": 14,
    "dislikes": 0,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Department Highest Salary\", \"titleSlug\": \"department-highest-salary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"1.5K\", \"totalSubmission\": \"2.5K\", \"totalAcceptedRaw\": 1538, \"totalSubmissionRaw\": 2517, \"acRate\": \"61.1%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "{\"headers\":{\"Enrollments\":[\"student_id\",\"course_id\",\"grade\"]},\"rows\":{\"Enrollments\":[[2,2,95],[2,3,95],[1,1,90],[1,2,99],[3,1,80],[3,2,75],[3,3,82]]}}",
    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Enrollments (student_id int, course_id int, grade int)\"\n  ],\n  \"mssql\": [\n    \"create table Enrollments (student_id int, course_id int, grade int)\"\n  ],\n  \"oraclesql\": [\n    \"create table Enrollments (student_id int, course_id int, grade int)\"\n  ],\n  \"database\": true\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists Enrollments (student_id int, course_id int, grade int)",
      "Truncate table Enrollments",
      "insert into Enrollments (student_id, course_id, grade) values ('2', '2', '95')",
      "insert into Enrollments (student_id, course_id, grade) values ('2', '3', '95')",
      "insert into Enrollments (student_id, course_id, grade) values ('1', '1', '90')",
      "insert into Enrollments (student_id, course_id, grade) values ('1', '2', '99')",
      "insert into Enrollments (student_id, course_id, grade) values ('3', '1', '80')",
      "insert into Enrollments (student_id, course_id, grade) values ('3', '2', '75')",
      "insert into Enrollments (student_id, course_id, grade) values ('3', '3', '82')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}