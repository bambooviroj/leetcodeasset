{
  "question": {
    "questionId": "355",
    "questionFrontendId": "355",
    "boundTopicId": null,
    "title": "Design Twitter",
    "titleSlug": "design-twitter",
    "content": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>postTweet(userId, tweetId)</b>: Compose a new tweet.</li>\r\n<li><b>getNewsFeed(userId)</b>: Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>\r\n<li><b>follow(followerId, followeeId)</b>: Follower follows a followee.</li>\r\n<li><b>unfollow(followerId, followeeId)</b>: Follower unfollows a followee.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nTwitter twitter = new Twitter();\r\n\r\n// User 1 posts a new tweet (id = 5).\r\ntwitter.postTweet(1, 5);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5].\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 follows user 2.\r\ntwitter.follow(1, 2);\r\n\r\n// User 2 posts a new tweet (id = 6).\r\ntwitter.postTweet(2, 6);\r\n\r\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\r\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 unfollows user 2.\r\ntwitter.unfollow(1, 2);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5],\r\n// since user 1 is no longer following user 2.\r\ntwitter.getNewsFeed(1);\r\n</pre>\r\n</p>",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 552,
    "dislikes": 142,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Heap",
        "slug": "heap",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Design",
        "slug": "design",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Twitter {\npublic:\n    /** Initialize your data structure here. */\n    Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    void postTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    vector<int> getNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    void follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    void unfollow(int followerId, int followeeId) {\n        \n    }\n};\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter* obj = new Twitter();\n * obj->postTweet(userId,tweetId);\n * vector<int> param_2 = obj->getNewsFeed(userId);\n * obj->follow(followerId,followeeId);\n * obj->unfollow(followerId,followeeId);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void unfollow(int followerId, int followeeId) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Twitter(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def postTweet(self, userId, tweetId):\n        \"\"\"\n        Compose a new tweet.\n        :type userId: int\n        :type tweetId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getNewsFeed(self, userId):\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        :type userId: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def follow(self, followerId, followeeId):\n        \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def unfollow(self, followerId, followeeId):\n        \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Twitter:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Compose a new tweet.\n        \"\"\"\n        \n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        \"\"\"\n        \n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n        \n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n        \n\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} Twitter;\n\n/** Initialize your data structure here. */\n\nTwitter* twitterCreate() {\n    \n}\n\n/** Compose a new tweet. */\nvoid twitterPostTweet(Twitter* obj, int userId, int tweetId) {\n  \n}\n\n/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\nint* twitterGetNewsFeed(Twitter* obj, int userId, int* retSize) {\n  \n}\n\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterFollow(Twitter* obj, int followerId, int followeeId) {\n  \n}\n\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterUnfollow(Twitter* obj, int followerId, int followeeId) {\n  \n}\n\nvoid twitterFree(Twitter* obj) {\n    \n}\n\n/**\n * Your Twitter struct will be instantiated and called as such:\n * Twitter* obj = twitterCreate();\n * twitterPostTweet(obj, userId, tweetId);\n \n * int* param_2 = twitterGetNewsFeed(obj, userId, retSize);\n \n * twitterFollow(obj, followerId, followeeId);\n \n * twitterUnfollow(obj, followerId, followeeId);\n \n * twitterFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    public void PostTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public IList<int> GetNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void Follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void Unfollow(int followerId, int followeeId) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.PostTweet(userId,tweetId);\n * IList<int> param_2 = obj.GetNewsFeed(userId);\n * obj.Follow(followerId,followeeId);\n * obj.Unfollow(followerId,followeeId);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Initialize your data structure here.\n */\nvar Twitter = function() {\n    \n};\n\n/**\n * Compose a new tweet. \n * @param {number} userId \n * @param {number} tweetId\n * @return {void}\n */\nTwitter.prototype.postTweet = function(userId, tweetId) {\n    \n};\n\n/**\n * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. \n * @param {number} userId\n * @return {number[]}\n */\nTwitter.prototype.getNewsFeed = function(userId) {\n    \n};\n\n/**\n * Follower follows a followee. If the operation is invalid, it should be a no-op. \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.follow = function(followerId, followeeId) {\n    \n};\n\n/**\n * Follower unfollows a followee. If the operation is invalid, it should be a no-op. \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.unfollow = function(followerId, followeeId) {\n    \n};\n\n/** \n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class Twitter\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    Compose a new tweet.\n    :type user_id: Integer\n    :type tweet_id: Integer\n    :rtype: Void\n=end\n    def post_tweet(user_id, tweet_id)\n        \n    end\n\n\n=begin\n    Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n    :type user_id: Integer\n    :rtype: Integer[]\n=end\n    def get_news_feed(user_id)\n        \n    end\n\n\n=begin\n    Follower follows a followee. If the operation is invalid, it should be a no-op.\n    :type follower_id: Integer\n    :type followee_id: Integer\n    :rtype: Void\n=end\n    def follow(follower_id, followee_id)\n        \n    end\n\n\n=begin\n    Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n    :type follower_id: Integer\n    :type followee_id: Integer\n    :rtype: Void\n=end\n    def unfollow(follower_id, followee_id)\n        \n    end\n\n\nend\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter.new()\n# obj.post_tweet(user_id, tweet_id)\n# param_2 = obj.get_news_feed(user_id)\n# obj.follow(follower_id, followee_id)\n# obj.unfollow(follower_id, followee_id)",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass Twitter {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    func postTweet(_ userId: Int, _ tweetId: Int) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    func getNewsFeed(_ userId: Int) -> [Int] {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    func follow(_ followerId: Int, _ followeeId: Int) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    func unfollow(_ followerId: Int, _ followeeId: Int) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * let obj = Twitter()\n * obj.postTweet(userId, tweetId)\n * let ret_2: [Int] = obj.getNewsFeed(userId)\n * obj.follow(followerId, followeeId)\n * obj.unfollow(followerId, followeeId)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type Twitter struct {\n    \n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() Twitter {\n    \n}\n\n\n/** Compose a new tweet. */\nfunc (this *Twitter) PostTweet(userId int, tweetId int)  {\n    \n}\n\n\n/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\nfunc (this *Twitter) GetNewsFeed(userId int) []int {\n    \n}\n\n\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\nfunc (this *Twitter) Follow(followerId int, followeeId int)  {\n    \n}\n\n\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\nfunc (this *Twitter) Unfollow(followerId int, followeeId int)  {\n    \n}\n\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * obj := Constructor();\n * obj.PostTweet(userId,tweetId);\n * param_2 := obj.GetNewsFeed(userId);\n * obj.Follow(followerId,followeeId);\n * obj.Unfollow(followerId,followeeId);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class Twitter() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Compose a new tweet. */\n    def postTweet(userId: Int, tweetId: Int) {\n        \n    }\n\n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    def getNewsFeed(userId: Int): List[Int] = {\n        \n    }\n\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    def follow(followerId: Int, followeeId: Int) {\n        \n    }\n\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    def unfollow(followerId: Int, followeeId: Int) {\n        \n    }\n\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Twitter() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Compose a new tweet. */\n    fun postTweet(userId: Int, tweetId: Int) {\n        \n    }\n\n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    fun getNewsFeed(userId: Int): List<Int> {\n        \n    }\n\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    fun follow(followerId: Int, followeeId: Int) {\n        \n    }\n\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    fun unfollow(followerId: Int, followeeId: Int) {\n        \n    }\n\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct Twitter {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Twitter {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Compose a new tweet. */\n    fn post_tweet(&self, user_id: i32, tweet_id: i32) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    fn get_news_feed(&self, user_id: i32) -> Vec<i32> {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    fn follow(&self, follower_id: i32, followee_id: i32) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    fn unfollow(&self, follower_id: i32, followee_id: i32) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * let obj = Twitter::new();\n * obj.post_tweet(userId, tweetId);\n * let ret_2: Vec<i32> = obj.get_news_feed(userId);\n * obj.follow(followerId, followeeId);\n * obj.unfollow(followerId, followeeId);\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Twitter {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Compose a new tweet.\n     * @param Integer $userId\n     * @param Integer $tweetId\n     * @return NULL\n     */\n    function postTweet($userId, $tweetId) {\n        \n    }\n  \n    /**\n     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n     * @param Integer $userId\n     * @return Integer[]\n     */\n    function getNewsFeed($userId) {\n        \n    }\n  \n    /**\n     * Follower follows a followee. If the operation is invalid, it should be a no-op.\n     * @param Integer $followerId\n     * @param Integer $followeeId\n     * @return NULL\n     */\n    function follow($followerId, $followeeId) {\n        \n    }\n  \n    /**\n     * Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n     * @param Integer $followerId\n     * @param Integer $followeeId\n     * @return NULL\n     */\n    function unfollow($followerId, $followeeId) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * $obj = Twitter();\n * $obj->postTweet($userId, $tweetId);\n * $ret_2 = $obj->getNewsFeed($userId);\n * $obj->follow($followerId, $followeeId);\n * $obj->unfollow($followerId, $followeeId);\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"37.8K\", \"totalSubmission\": \"134.8K\", \"totalAcceptedRaw\": 37750, \"totalSubmissionRaw\": 134813, \"acRate\": \"28.0%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"Twitter\",\"postTweet\",\"getNewsFeed\",\"follow\",\"postTweet\",\"getNewsFeed\",\"unfollow\",\"getNewsFeed\"]\n[[],[1,5],[1],[1,2],[2,6],[1],[1,2],[1]]",
    "metaData": "{\r\n    \"classname\": \"Twitter\",\r\n    \"maxbytesperline\": 170000,\r\n    \"constructor\": {\r\n        \"params\": [],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"postTweet\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"userId\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"tweetId\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Compose a new tweet.\"\r\n        },\r\n        {\r\n            \"name\" : \"getNewsFeed\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"userId\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"list<integer>\"\r\n            },\r\n            \"comment\": \"Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\"\r\n        },\r\n        {\r\n            \"name\" : \"follow\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"followerId\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"followeeId\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Follower follows a followee. If the operation is invalid, it should be a no-op.\"\r\n        },\r\n        {\r\n            \"name\" : \"unfollow\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"followerId\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"followeeId\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Follower unfollows a followee. If the operation is invalid, it should be a no-op.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}