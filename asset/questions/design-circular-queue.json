{
  "question": {
    "questionId": "860",
    "questionFrontendId": "622",
    "boundTopicId": null,
    "title": "Design Circular Queue",
    "titleSlug": "design-circular-queue",
    "content": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\r\n\r\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularQueue(k)</code>: Constructor, set the size of the queue to be k.</li>\r\n\t<li><code>Front</code>: Get the front item from the queue. If the queue is empty, return -1.</li>\r\n\t<li><code>Rear</code>: Get the last item from the queue. If the queue is empty, return -1.</li>\r\n\t<li><code>enQueue(value)</code>: Insert an element into the circular queue. Return true if the operation is successful.</li>\r\n\t<li><code>deQueue()</code>: Delete an element from the circular queue. Return true if the operation is successful.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether the circular queue is empty or not.</li>\r\n\t<li><code>isFull()</code>: Checks whether the circular queue is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\r\ncircularQueue.enQueue(1); &nbsp;// return true\r\ncircularQueue.enQueue(2); &nbsp;// return true\r\ncircularQueue.enQueue(3); &nbsp;// return true\r\ncircularQueue.enQueue(4); &nbsp;// return false, the queue is full\r\ncircularQueue.Rear(); &nbsp;// return 3\r\ncircularQueue.isFull(); &nbsp;// return true\r\ncircularQueue.deQueue(); &nbsp;// return true\r\ncircularQueue.enQueue(4); &nbsp;// return true\r\ncircularQueue.Rear(); &nbsp;// return 4\r\n</pre>\r\n&nbsp;\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Queue library.</li>\r\n</ul>\r\n",
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": false,
    "difficulty": "Medium",
    "likes": 286,
    "dislikes": 56,
    "isLiked": null,
    "similarQuestions": "[{\"title\": \"Design Circular Deque\", \"titleSlug\": \"design-circular-deque\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
    "contributors": [
      {
        "username": "tinylic",
        "profileUrl": "/tinylic/",
        "avatarUrl": "https://www.gravatar.com/avatar/c8f3bf6706478175081358c2ced2ae2f.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}",
    "topicTags": [
      {
        "name": "Design",
        "slug": "design",
        "translatedName": null,
        "__typename": "TopicTagNode"
      },
      {
        "name": "Queue",
        "slug": "queue",
        "translatedName": null,
        "__typename": "TopicTagNode"
      }
    ],
    "companyTagStats": null,
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class MyCircularQueue {\npublic:\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k) {\n        \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value) {\n        \n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue() {\n        \n    }\n    \n    /** Get the front item from the queue. */\n    int Front() {\n        \n    }\n    \n    /** Get the last item from the queue. */\n    int Rear() {\n        \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty() {\n        \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    bool isFull() {\n        \n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class MyCircularQueue {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    public MyCircularQueue(int k) {\n        \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    public boolean enQueue(int value) {\n        \n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    public boolean deQueue() {\n        \n    }\n    \n    /** Get the front item from the queue. */\n    public int Front() {\n        \n    }\n    \n    /** Get the last item from the queue. */\n    public int Rear() {\n        \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    public boolean isEmpty() {\n        \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    public boolean isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class MyCircularQueue(object):\n\n    def __init__(self, k):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        :type k: int\n        \"\"\"\n        \n\n    def enQueue(self, value):\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def deQueue(self):\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        \n\n    def Front(self):\n        \"\"\"\n        Get the front item from the queue.\n        :rtype: int\n        \"\"\"\n        \n\n    def Rear(self):\n        \"\"\"\n        Get the last item from the queue.\n        :rtype: int\n        \"\"\"\n        \n\n    def isEmpty(self):\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        :rtype: bool\n        \"\"\"\n        \n\n    def isFull(self):\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        \n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        \n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        \n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "\n\n\ntypedef struct {\n    \n} MyCircularQueue;\n\n/** Initialize your data structure here. Set the size of the queue to be k. */\n\nMyCircularQueue* myCircularQueueCreate(int k) {\n    \n}\n\n/** Insert an element into the circular queue. Return true if the operation is successful. */\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\n  \n}\n\n/** Delete an element from the circular queue. Return true if the operation is successful. */\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n  \n}\n\n/** Get the front item from the queue. */\nint myCircularQueueFront(MyCircularQueue* obj) {\n  \n}\n\n/** Get the last item from the queue. */\nint myCircularQueueRear(MyCircularQueue* obj) {\n  \n}\n\n/** Checks whether the circular queue is empty or not. */\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\n  \n}\n\n/** Checks whether the circular queue is full or not. */\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\n  \n}\n\nvoid myCircularQueueFree(MyCircularQueue* obj) {\n    \n}\n\n/**\n * Your MyCircularQueue struct will be instantiated and called as such:\n * MyCircularQueue* obj = myCircularQueueCreate(k);\n * bool param_1 = myCircularQueueEnQueue(obj, value);\n \n * bool param_2 = myCircularQueueDeQueue(obj);\n \n * int param_3 = myCircularQueueFront(obj);\n \n * int param_4 = myCircularQueueRear(obj);\n \n * bool param_5 = myCircularQueueIsEmpty(obj);\n \n * bool param_6 = myCircularQueueIsFull(obj);\n \n * myCircularQueueFree(obj);\n*/",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class MyCircularQueue {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    public MyCircularQueue(int k) {\n        \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    public bool EnQueue(int value) {\n        \n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    public bool DeQueue() {\n        \n    }\n    \n    /** Get the front item from the queue. */\n    public int Front() {\n        \n    }\n    \n    /** Get the last item from the queue. */\n    public int Rear() {\n        \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    public bool IsEmpty() {\n        \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    public bool IsFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * bool param_1 = obj.EnQueue(value);\n * bool param_2 = obj.DeQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * bool param_5 = obj.IsEmpty();\n * bool param_6 = obj.IsFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * Initialize your data structure here. Set the size of the queue to be k.\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n    \n};\n\n/**\n * Insert an element into the circular queue. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n    \n};\n\n/**\n * Delete an element from the circular queue. Return true if the operation is successful.\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n    \n};\n\n/**\n * Get the front item from the queue.\n * @return {number}\n */\nMyCircularQueue.prototype.Front = function() {\n    \n};\n\n/**\n * Get the last item from the queue.\n * @return {number}\n */\nMyCircularQueue.prototype.Rear = function() {\n    \n};\n\n/**\n * Checks whether the circular queue is empty or not.\n * @return {boolean}\n */\nMyCircularQueue.prototype.isEmpty = function() {\n    \n};\n\n/**\n * Checks whether the circular queue is full or not.\n * @return {boolean}\n */\nMyCircularQueue.prototype.isFull = function() {\n    \n};\n\n/** \n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "class MyCircularQueue\n\n=begin\n    Initialize your data structure here. Set the size of the queue to be k.\n    :type k: Integer\n=end\n    def initialize(k)\n        \n    end\n\n\n=begin\n    Insert an element into the circular queue. Return true if the operation is successful.\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def en_queue(value)\n        \n    end\n\n\n=begin\n    Delete an element from the circular queue. Return true if the operation is successful.\n    :rtype: Boolean\n=end\n    def de_queue()\n        \n    end\n\n\n=begin\n    Get the front item from the queue.\n    :rtype: Integer\n=end\n    def front()\n        \n    end\n\n\n=begin\n    Get the last item from the queue.\n    :rtype: Integer\n=end\n    def rear()\n        \n    end\n\n\n=begin\n    Checks whether the circular queue is empty or not.\n    :rtype: Boolean\n=end\n    def is_empty()\n        \n    end\n\n\n=begin\n    Checks whether the circular queue is full or not.\n    :rtype: Boolean\n=end\n    def is_full()\n        \n    end\n\n\nend\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue.new(k)\n# param_1 = obj.en_queue(value)\n# param_2 = obj.de_queue()\n# param_3 = obj.front()\n# param_4 = obj.rear()\n# param_5 = obj.is_empty()\n# param_6 = obj.is_full()",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "\nclass MyCircularQueue {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    init(_ k: Int) {\n        \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    func enQueue(_ value: Int) -> Bool {\n        \n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    func deQueue() -> Bool {\n        \n    }\n    \n    /** Get the front item from the queue. */\n    func Front() -> Int {\n        \n    }\n    \n    /** Get the last item from the queue. */\n    func Rear() -> Int {\n        \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    func isEmpty() -> Bool {\n        \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    func isFull() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue(k)\n * let ret_1: Bool = obj.enQueue(value)\n * let ret_2: Bool = obj.deQueue()\n * let ret_3: Int = obj.Front()\n * let ret_4: Int = obj.Rear()\n * let ret_5: Bool = obj.isEmpty()\n * let ret_6: Bool = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "type MyCircularQueue struct {\n    \n}\n\n\n/** Initialize your data structure here. Set the size of the queue to be k. */\nfunc Constructor(k int) MyCircularQueue {\n    \n}\n\n\n/** Insert an element into the circular queue. Return true if the operation is successful. */\nfunc (this *MyCircularQueue) EnQueue(value int) bool {\n    \n}\n\n\n/** Delete an element from the circular queue. Return true if the operation is successful. */\nfunc (this *MyCircularQueue) DeQueue() bool {\n    \n}\n\n\n/** Get the front item from the queue. */\nfunc (this *MyCircularQueue) Front() int {\n    \n}\n\n\n/** Get the last item from the queue. */\nfunc (this *MyCircularQueue) Rear() int {\n    \n}\n\n\n/** Checks whether the circular queue is empty or not. */\nfunc (this *MyCircularQueue) IsEmpty() bool {\n    \n}\n\n\n/** Checks whether the circular queue is full or not. */\nfunc (this *MyCircularQueue) IsFull() bool {\n    \n}\n\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.EnQueue(value);\n * param_2 := obj.DeQueue();\n * param_3 := obj.Front();\n * param_4 := obj.Rear();\n * param_5 := obj.IsEmpty();\n * param_6 := obj.IsFull();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "class MyCircularQueue(_k: Int) {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    \n\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    def enQueue(value: Int): Boolean = {\n        \n    }\n\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    def deQueue(): Boolean = {\n        \n    }\n\n    /** Get the front item from the queue. */\n    def Front(): Int = {\n        \n    }\n\n    /** Get the last item from the queue. */\n    def Rear(): Int = {\n        \n    }\n\n    /** Checks whether the circular queue is empty or not. */\n    def isEmpty(): Boolean = {\n        \n    }\n\n    /** Checks whether the circular queue is full or not. */\n    def isFull(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class MyCircularQueue(k: Int) {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    \n\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    fun enQueue(value: Int): Boolean {\n        \n    }\n\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    fun deQueue(): Boolean {\n        \n    }\n\n    /** Get the front item from the queue. */\n    fun Front(): Int {\n        \n    }\n\n    /** Get the last item from the queue. */\n    fun Rear(): Int {\n        \n    }\n\n    /** Checks whether the circular queue is empty or not. */\n    fun isEmpty(): Boolean {\n        \n    }\n\n    /** Checks whether the circular queue is full or not. */\n    fun isFull(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "struct MyCircularQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCircularQueue {\n\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    fn new(k: i32) -> Self {\n        \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    fn en_queue(&self, value: i32) -> bool {\n        \n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    fn de_queue(&self) -> bool {\n        \n    }\n    \n    /** Get the front item from the queue. */\n    fn front(&self) -> i32 {\n        \n    }\n    \n    /** Get the last item from the queue. */\n    fn rear(&self) -> i32 {\n        \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    fn is_empty(&self) -> bool {\n        \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    fn is_full(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue::new(k);\n * let ret_1: bool = obj.en_queue(value);\n * let ret_2: bool = obj.de_queue();\n * let ret_3: i32 = obj.front();\n * let ret_4: i32 = obj.rear();\n * let ret_5: bool = obj.is_empty();\n * let ret_6: bool = obj.is_full();\n */",
        "__typename": "CodeSnippetNode"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class MyCircularQueue {\n    /**\n     * Initialize your data structure here. Set the size of the queue to be k.\n     * @param Integer $k\n     */\n    function __construct($k) {\n        \n    }\n  \n    /**\n     * Insert an element into the circular queue. Return true if the operation is successful.\n     * @param Integer $value\n     * @return Boolean\n     */\n    function enQueue($value) {\n        \n    }\n  \n    /**\n     * Delete an element from the circular queue. Return true if the operation is successful.\n     * @return Boolean\n     */\n    function deQueue() {\n        \n    }\n  \n    /**\n     * Get the front item from the queue.\n     * @return Integer\n     */\n    function Front() {\n        \n    }\n  \n    /**\n     * Get the last item from the queue.\n     * @return Integer\n     */\n    function Rear() {\n        \n    }\n  \n    /**\n     * Checks whether the circular queue is empty or not.\n     * @return Boolean\n     */\n    function isEmpty() {\n        \n    }\n  \n    /**\n     * Checks whether the circular queue is full or not.\n     * @return Boolean\n     */\n    function isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * $obj = MyCircularQueue($k);\n * $ret_1 = $obj->enQueue($value);\n * $ret_2 = $obj->deQueue();\n * $ret_3 = $obj->Front();\n * $ret_4 = $obj->Rear();\n * $ret_5 = $obj->isEmpty();\n * $ret_6 = $obj->isFull();\n */",
        "__typename": "CodeSnippetNode"
      }
    ],
    "stats": "{\"totalAccepted\": \"32.7K\", \"totalSubmission\": \"80.7K\", \"totalAcceptedRaw\": 32708, \"totalSubmissionRaw\": 80739, \"acRate\": \"40.5%\"}",
    "hints": [],
    "solution": null,
    "status": null,
    "sampleTestCase": "[\"MyCircularQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"Rear\",\"isFull\",\"deQueue\",\"enQueue\",\"Rear\"]\n[[3],[1],[2],[3],[4],[],[],[],[4],[]]",
    "metaData": "{\r\n    \"classname\": \"MyCircularQueue\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"k\"\r\n            }\r\n        ],\r\n        \"comment\": \"Initialize your data structure here. Set the size of the queue to be k.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"enQueue\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Insert an element into the circular queue. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"deQueue\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Delete an element from the circular queue. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"Front\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the front item from the queue.\"\r\n        },\r\n        {\r\n            \"name\" : \"Rear\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the last item from the queue.\"\r\n        },\r\n        {\r\n            \"name\" : \"isEmpty\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular queue is empty or not.\"\r\n        },\r\n        {\r\n            \"name\" : \"isFull\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular queue is full or not.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 5.0.1</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.12</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}