{
  "question": {
    "questionId": "607",
    "questionFrontendId": "607",
    "boundTopicId": null,
    "title": "Sales Person",
    "titleSlug": "sales-person",
    "content": null,
    "translatedTitle": null,
    "translatedContent": null,
    "isPaidOnly": true,
    "difficulty": "Easy",
    "likes": 71,
    "dislikes": 18,
    "isLiked": null,
    "similarQuestions": "[]",
    "contributors": [
      {
        "username": "artistscript",
        "profileUrl": "/artistscript/",
        "avatarUrl": "https://www.gravatar.com/avatar/1d186f42681a157b2cce3ebf9f9c0911.png?s=200",
        "__typename": "ContributorNode"
      }
    ],
    "langToValidPlayground": null,
    "topicTags": [],
    "companyTagStats": null,
    "codeSnippets": null,
    "stats": "{\"totalAccepted\": \"12.5K\", \"totalSubmission\": \"21.6K\", \"totalAcceptedRaw\": 12531, \"totalSubmissionRaw\": 21586, \"acRate\": \"58.1%\"}",
    "hints": [
      "You need to query who sold to company 'RED' first, then output the sales person who is not in the first query result."
    ],
    "solution": {
      "id": "181",
      "canSeeDetail": true,
      "__typename": "ArticleNode"
    },
    "status": null,
    "sampleTestCase": "{\"headers\": {\"salesperson\": [\"sales_id\", \"name\", \"salary\", \"commission_rate\",\"hire_date\"], \"company\": [\"com_id\", \"name\",\"city\"],\"orders\":[\"order_id\",\"order_date\",\"com_id\",\"sales_id\",\"amount\"]}, \"rows\": {\"salesperson\": [[1, \"John\", 100000, 6, \"4/1/2006\"], [2, \"Amy\", 12000, 5,\"5/1/2010\"], [3, \"Mark\", 65000, 12, \"12/25/2008\"], [4, \"Pam\", 25000, 25,\"1/1/2005\"],[5,\"Alex\",5000,10,\"2/3/2007\"]], \"company\": [[1, \"RED\",\"Boston\"], [2, \"ORANGE\", \"New York\"],[3, \"YELLOW\", \"Boston\"],[4, \"GREEN\", \"Austin\"]],\"orders\":[[1,\"1/1/2014\",3,4,10000],[2, \"2/1/2014\", 4, 5, 5000],[3, \"3/1/2014\", 1, 1, 50000],[4, \"4/1/2014\", 1, 4, 25000]]}}",
    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists salesperson (sales_id int, name varchar(255), salary int,commission_rate int, hire_date varchar(255))\",\r\n    \"Create table If Not Exists company (com_id int, name varchar(255), city varchar(255))\",\r\n    \"Create table If Not Exists orders (order_id int, order_date varchar(255), com_id int, sales_id int, amount int)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table salesperson (sales_id int, name varchar(255), salary int,commission_rate int, hire_date varchar(255))\",\r\n    \"Create table company (com_id int, name varchar(255), city varchar(255))\",\r\n    \"Create table orders (order_id int, order_date varchar(255), com_id int, sales_id int, amount int)\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table salesperson (sales_id int, name varchar(255), salary int,commission_rate int, hire_date varchar(255))\",\r\n    \"Create table company (com_id int, name varchar(255), city varchar(255))\",\r\n    \"Create table orders (order_id int, order_date varchar(255), com_id int, sales_id int, amount int)\"\r\n  ],\r\n  \"database\": true\r\n}",
    "judgerAvailable": true,
    "judgeType": "large",
    "mysqlSchemas": [
      "Create table If Not Exists salesperson (sales_id int, name varchar(255), salary int,commission_rate int, hire_date varchar(255))",
      "Create table If Not Exists company (com_id int, name varchar(255), city varchar(255))",
      "Create table If Not Exists orders (order_id int, order_date varchar(255), com_id int, sales_id int, amount int)",
      "Truncate table salesperson",
      "insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values ('1', 'John', '100000', '6', '4/1/2006')",
      "insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values ('2', 'Amy', '12000', '5', '5/1/2010')",
      "insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values ('3', 'Mark', '65000', '12', '12/25/2008')",
      "insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values ('4', 'Pam', '25000', '25', '1/1/2005')",
      "insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values ('5', 'Alex', '5000', '10', '2/3/2007')",
      "Truncate table company",
      "insert into company (com_id, name, city) values ('1', 'RED', 'Boston')",
      "insert into company (com_id, name, city) values ('2', 'ORANGE', 'New York')",
      "insert into company (com_id, name, city) values ('3', 'YELLOW', 'Boston')",
      "insert into company (com_id, name, city) values ('4', 'GREEN', 'Austin')",
      "Truncate table orders",
      "insert into orders (order_id, order_date, com_id, sales_id, amount) values ('1', '1/1/2014', '3', '4', '10000')",
      "insert into orders (order_id, order_date, com_id, sales_id, amount) values ('2', '2/1/2014', '4', '5', '5000')",
      "insert into orders (order_id, order_date, com_id, sales_id, amount) values ('3', '3/1/2014', '1', '1', '50000')",
      "insert into orders (order_id, order_date, com_id, sales_id, amount) values ('4', '4/1/2014', '1', '4', '25000')"
    ],
    "enableRunCode": true,
    "enableTestMode": false,
    "envInfo": "{\"mysql\": [\"MySQL\", \"<p>Run with <code>mysql-server 5.7.21</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p>Run with <code>mssql</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p>Run with <code>oracle sql</code>.</p>\"]}",
    "libraryUrl": null,
    "__typename": "QuestionNode"
  }
}